From 6c62aa335c2ebb72eedd11d06cde906679440368 Mon Sep 17 00:00:00 2001
From: Andrew Laski <andrew.laski@rackspace.com>
Date: Fri, 12 Dec 2014 15:34:45 -0500
Subject: [PATCH] DRAFT Proposal for cells v2 scheduling and build requests

This is the first draft of a proposal for how to handle the build
process of an instance in cells v2.  It's likely that this needs to be
split into multiple specs but it may help to discuss the full picture
first.

blueprint cells-scheduling

Change-Id: I9fbbb107cb148aee4404f6fa3f06021edf3fa5b4
---
 specs/kilo/approved/cells-scheduling.rst | 179 +++++++++++++++++++++++++++++++
 1 file changed, 179 insertions(+)
 create mode 100644 specs/kilo/approved/cells-scheduling.rst

diff --git a/specs/kilo/approved/cells-scheduling.rst b/specs/kilo/approved/cells-scheduling.rst
new file mode 100644
index 0000000..6e472d5
--- /dev/null
+++ b/specs/kilo/approved/cells-scheduling.rst
@@ -0,0 +1,179 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+Cells v2 scheduling
+==========================================
+
+https://blueprints.launchpad.net/nova/+spec/cells-scheduling
+
+In order to schedule instance builds to compute hosts Nova and the scheduler
+will need to take into account that hosts are split into cells.
+
+
+Problem description
+===================
+
+When Nova is partitioned into cells, in order to boot an instance a scheduling
+decision will need to be made on both a cell and host to use.  And the decision
+of which cell to use will need to be made before the build process can be sent
+to a cell.
+
+Use Cases
+----------
+
+* Operators want to partition their deployments into cells for scaling, failure
+  domain, and buildout reasons.  When partitioned, we need to have flexible
+  scheduling that can make decisions on cells and hosts.
+
+Project Priority
+-----------------
+
+Cells v2 has been made a project priority for Kilo.
+
+
+Proposed change
+===============
+
+
+The change being proposed has a few components.  Where to call the scheduler,
+the interface for passing the build to a cell, and storing the instance request
+before scheduling.
+
+When an API request is made to build an instance there is a certain response
+contract that we need to honor.  This means that we need to have stored certain
+information from the request such as image, flavor, name, uuid, etc...  In a
+cellsv2 setup this poses a challenge because that would have been stored in the
+instance table, but we don't know which cell instance table to put it in yet.
+There will need to be a table in the api database which can persist information
+about an instance build request until it has been scheduled and created within
+a cell.
+
+The scheduler then needs to be queried in order to pick a (cell, host) tuple.
+This could be done in a greenthread in the nova-api service or conductor could
+be modified and run at the api level for this.  For clarity, this would be
+handled by the nova-scheduler and not an addition to the current cells
+scheduler.
+
+In order to aid current cells users with moving from cellsv1 to cellsv2 I would
+add the possibility that the first scheduler will pick a cell but not a host.
+Then once the build request reaches the cell another scheduler call can be made
+to pick a host.  This adds a slight amount of complexity but will allow cellsv1
+users to migrate over to cellsv2 without needing to wait on large reworkings of
+the scheduler.
+
+
+Alternatives
+------------
+
+There are different variations of this proposal, such as using a two tiered
+scheduling system like cellsv1.  This spec is currently a forum to discuss
+this proposal against those alternatives.
+
+Data model impact
+-----------------
+
+A new table would be added to the 'nova_api' database for storing build request
+details and an instance uuid.  This starts to look a little like storing a task
+to be completed.
+
+A model for this might look something like:::
+
+    CREATE TABLE `build_request` (
+      `uuid`,
+      `project_id`,
+      `flavor`,
+      `image_ref`,
+      `block_device_mapping`,
+      `metadata`,
+      `keypair`,
+      `availability_zone`,
+      `security_groups`,
+      ...
+    )
+
+REST API impact
+---------------
+
+None
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+
+Lots.  To be detailed later.
+
+Developer impact
+----------------
+
+Lots.  To be detailed later.
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  alaski
+
+Other contributors:
+  None
+
+Work Items
+----------
+
+TBD
+
+
+Dependencies
+============
+
+https://blueprints.launchpad.net/nova/+spec/cells-instance-mapping
+
+
+Testing
+=======
+
+Since this is designed to be an internal re-architecting of Nova with no user
+visible changes the current suite of Tempest or functional tests should
+suffice.  At some point we will want to look at how to test multiple cells or
+potentially exposing the concept of a cell in the API and we will tackle
+testing requirements then.
+
+
+Documentation Impact
+====================
+
+Documentation will be written describing the flow of an instance build and how
+and where scheduling decisions are made.
+
+
+References
+==========
+
+``https://etherpad.openstack.org/p/kilo-nova-cells``
+``https://etherpad.openstack.org/p/nova-cells-scheduling-requirements``
-- 
1.9.1

