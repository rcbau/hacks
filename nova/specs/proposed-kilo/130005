From c3993dd23d6a37eb2d4bd0e59c7fac92516413ae Mon Sep 17 00:00:00 2001
From: Jennifer Mulsow <jmulsow@us.ibm.com>
Date: Tue, 21 Oct 2014 13:50:27 -0500
Subject: [PATCH] Nova specs doc for dynamic server groups

This is the documentation for
https://blueprints.launchpad.net/nova/+spec/dynamic-server-groups

Change-Id: I58de5b61b1db05b1392b6a5ea54e37d43e2b867e
---
 specs/kilo/approved/dynamic-server-groups.rst | 451 ++++++++++++++++++++++++++
 1 file changed, 451 insertions(+)
 create mode 100644 specs/kilo/approved/dynamic-server-groups.rst

diff --git a/specs/kilo/approved/dynamic-server-groups.rst b/specs/kilo/approved/dynamic-server-groups.rst
new file mode 100644
index 0000000..d85a812
--- /dev/null
+++ b/specs/kilo/approved/dynamic-server-groups.rst
@@ -0,0 +1,451 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+Dynamic Management of Server Groups
+==========================================
+
+https://blueprints.launchpad.net/nova/+spec/dynamic-server-groups
+
+This blueprint extends the functionality of "Server Groups" such that the
+virtual machines in the group can be added or removed at any time (i.e.,
+instead of limiting it to at boot time only). By providing this added bit of
+functionality, server groups become orders of magnitude more operator-friendly
+and usable in many real-world scenarios.
+
+
+Problem description
+===================
+
+Use Cases
+----------
+
+* As a cloud operator, I want to add an existing instance to a server group, so
+  that I can have more flexibility with respect to defining what instances will
+  have affinity rules since I may not necessarily know these rules at instance
+  creation time.
+
+* As a cloud operator, I want to remove a instance from a server group (i.e.,
+  without having to delete the instance), so that I can update my groups as
+  affinity rules change over time.
+
+Project Priority
+-----------------
+
+None
+
+Proposed change
+===============
+
+Two new actions to be performed on server groups will be added. One to add an
+existing instance to a server group, and another to remove an instance from a
+server group. These will be added in the form of 2 new Nova APIs and 2 new Nova
+CLIs.
+
+The two new APIs will be added to
+nova/api/openstack/compute/contrib/server_groups.py. The new method to add a
+instance to a server group will use the existing add_members() method in
+nova/objects/instance_group.py:InstanceGroup. This method calls the Nova
+database API method instance_group_members_add() to add servers to a server
+group. A new remove_member() method will need to be added to the
+nova/objects/instance_group.py:InstanceGroup class that will call the existing
+Nova database API method instance_group_member_delete().
+
+When adding an instance from a server group, validation will need to be
+performed on the server_group_members quota value. The addition of that
+instance into the server group will be blocked if it exceeds the quota.
+
+The server_group_members quota value will need to be incremented by one
+when an instance is added to a server group and decremented by one when a an
+instance is removed from a server group.
+
+When a user tries to add an instance to a server group, the API will need to
+check the hosts of all the instances in the group to compare with the host of
+the instance that is being requested to join. If the instance would violate the
+policy of the server group, then it will not be allowed to join.
+
+In addition to this check, the API to add an instance to a server group will
+need to ensure that servers could not be added in parallel to the same group
+that could cause a policy of the group to be violated. Currently, there are
+ways in which instances in a server group could be moved to a different host
+that would cause the policy to be violated.The addition of an API to add a
+server to a server group would add to these possibilities, if proper care is
+not taken. The following part of this section will describe how race conditions
+will be addressed, both in the existing code, and with the addition of the two
+new server group APIs outlined in this document. Also, reference the
+dependencies section for more info on open issues with the current code.
+
+In order to best convey the race conditions and the preventative measures that
+will be put into place, each condition has been inserted into a table that is
+linked to below. This table outlines scenarios involving a server group with
+anti-affinity policy only. Affinity is discussed after the anti-affinity table.
+
+The table is structured such that the first column represents the operation
+that the user is trying to perform on an instance in a server group, and the
+horizontal axis represents other actions that are going on in parallel to
+instances in the same server group. The last column describes how the scenario
+is prevented using one of the below mechanisms.
+
+Note: Row 3 through 6 (second 'deploy VM' row through first 'live migrate VM'
+row) represent scenarios in which the policy of a server group could be
+violated with the existing code today.
+
+Mechanism 1::
+
+  A user will not be allowed to add an existing instance to a sever group if
+  any of the following actions are being performed on any instances in the
+  server group: deploy, live migration, cold migration, and resize. This will
+  be checked in the "add server to a server group API", and a 409 HTTP error
+  code will be returned with a message explaining this to the user.
+
+  This check will prevent a timing window where the server group policy can be
+  violated due to an ongoing operation that places an instance on a new host
+  and a simultaneous call to the "add server to a server group API". It is also
+  needed because the cold migration, live migration, and resize operations
+  could be rolled back and potentially cause a policy violation. Adding this
+  logic is a straightforward way to deal with that situation.
+
+Mechanism 2::
+
+  For a server group with anti-affinity policy:
+  When selecting a host for placement for a deploy, cold migration, live
+  migration, or resize, the Nova scheduler will filter out source and target
+  hosts of instances belonging to the same server group that are currently
+  undergoing a cold migration, live migration, or resize. The Nova scheduler
+  will also filter out any target hosts of ongoing deploys of instances being
+  deployed to the same server group. The source and target hosts of an ongoing
+  resize will only be filtered out if they are not the same.
+
+  This additional logic will be added to the existing anti-affinity filter.
+  This additional logic is needed because these operations can be rolled back
+  and therefore could introduce policy violations for other operations that
+  occurred after the respective operation was initiated.
+
+  For example, currently an instance in a group with anti-affinity policy could
+  be migrating from Host A to Host B. At the same time a new instance could be
+  deployed in the same group on host A. If the migration fails, and the
+  instance is rolled back to Host A, the anti-affinity policy will be violated.
+  With this additional logic, this could not occur, since both the source and
+  target hosts for the migration would have not been considered for candidates
+  for the deploy operation.
+
+Mechanism 3::
+
+  lockutils synchronization will be used on the server group ID at the API
+  level around the policy validation check and database update for the "add
+  a server to a server group API".
+
+  This will prevent race conditions where simultaneous calls to the "add a
+  server to a server group API" could add multiple instances with conflicting
+  hosts to the server group's policy.
+
+Mechanism 4::
+
+  As an extra precaution, the "add a server to a server group API" will do an
+  additional policy validation check after the database has been updated. If it
+  finds that the policy has been violated at this point, it will back out the
+  addition of this instance into the server group, and return an HTTP 409 code.
+
+Due to the 79 characters per line limit, the table for anti-affinity race
+conditions could not be displayed here in ASCII text. It is saved as a PDF
+in the following github repository.
+https://github.com/jmulsow/nova-specs-extras/raw/master/anti-affinity.pdf
+
+There are not as many race conditions to worry about when a server group has an
+affinity policy. Resizes to a different host, cold migrations, and live
+migrations will not be allowed on any instances in an affinity server group,
+since instances can only ever be on a single host. The following are the
+scenarios that have the possibility of violating the policy of the server
+group.
+
+Scenario 1::
+
+  0. Server Group 1 is created with an 'affinity' policy
+  1. VM-1 is deployed to host A in Server Group 1
+  2. VM-2 is deployed to host A in Server Group 1 and finishes before VM-1
+     finishes
+  3. VM-1 deploy eventually fails, so it would generally reschedule... but
+     since VM-2 was added to the group, rescheduling should be disabled since
+     the policy would be violated
+
+Scenario 2::
+
+  The "add a server to a server group API" is called to add an instance on
+  Host A to a server group with the affinity policy. There is an ongoing
+  deploy at the same time that is deploying an instance to Host B and assigning
+  it to the same server group. This scenario will be prevented with Mechanism
+  1. The add server to a server group API will return a 409 because it will
+  find that there is an ongoing deploy for an instance in this server group.
+
+Alternatives
+------------
+
+The alternative to this would be to retain the existing behavior where a user
+may only add an instance to a server group at boot time. The instance will
+always belong to the given server group until the instance is deleted, and only
+then will the instance be removed from the server group.
+
+If this route is chosen, the existing race conditions and other issues outlined
+in the dependencies section will still need to be addressed.
+
+Data model impact
+-----------------
+
+None. The existing instance group data models can be used. No additions needed.
+
+REST API impact
+---------------
+
+Two new APIs will be added for Server Groups.
+
+* Specification for the method
+
+  * Adds a server to a server group
+
+  * Method type: POST
+
+  * Normal http response code: 200
+
+  * Expected error http response code:
+
+    * 400 - invalid request::
+
+          This response code will be returned if the addition of this server
+          would violate a policy of the server group, exceed the server group
+          members quota value, or if a required parameter is missing from the
+          request.
+
+    * 404 - not found::
+
+          This response code will be returned if the server group or server
+          passed in does not exist.
+
+    * 409 - conflict::
+
+          This response code will be returned if the instance passed in has a
+          pending task. In addition, it will also be returned if any instance
+          belonging to the server group passed in is currently undergoing any
+          of the following: resize, cold migration, or live migration.
+
+  * URL: /v2/{tenant_id}/os-server-groups/{ServerGroup_id}/action
+
+  * Parameters:
+
+    +----------------+-------+------------+-----------------------------------+
+    |  Parameter     | Style |   Type     |  Description                      |
+    +================+=======+============+===================================+
+    | tenant_id      | URI   | xsd:string | The ID for the tenant or          |
+    |                |       |            | account in a multi-tenancy cloud. |
+    +----------------+-------+------------+-----------------------------------+
+    | ServerGroup_id | URI   | String     | The server group ID.              |
+    +----------------+-------+------------+-----------------------------------+
+    | server_id      | URI   | capsi:UUID | The UUID for the server to add to |
+    |                |       |            | the server group.                 |
+    +----------------+-------+------------+-----------------------------------+
+
+  * JSON schema definition for the body data::
+
+           {
+               "add_server": {
+               "server_id": "324dfb7d-f4a9-419a-9a19-237df04b443b"
+               }
+           }
+
+  * JSON schema definition for the response data::
+
+            {
+                "server_group": {
+                    "id": "5bbcc3c4-1da2-4437-a48a-66f15b1b13f9",
+                    "name": "test",
+                    "policies": [
+                        "anti-affinity"
+                    ],
+                    "members": [
+                        "324dfb7d-f4a9-419a-9a19-237df04b443b"
+                    ],
+                    "metadata": {}
+                }
+            }
+
+* Specification for the method
+
+  * Removes a server from a server group
+
+  * Method type: POST
+
+  * Normal http response code: 200
+
+  * Expected error http response codes:
+
+    * 400 - invalid request::
+
+          This response code will be returned if a required parameter is
+          missing from the request.
+
+    * 404 - not found::
+
+          This response code will be returned if the server group or server
+          passed in does not exist.
+
+  * URL: /v2/{tenant_id}/os-server-groups/{ServerGroup_id}/action
+
+  * Parameters:
+
+    +----------------+-------+------------+-----------------------------------+
+    |  Parameter     | Style |   Type     |  Description                      |
+    +================+=======+============+===================================+
+    | tenant_id      | URI   | xsd:string | The ID for the tenant or          |
+    |                |       |            | account in a multi-tenancy cloud. |
+    +----------------+-------+------------+-----------------------------------+
+    | ServerGroup_id | URI   | String     | The server group ID.              |
+    +----------------+-------+------------+-----------------------------------+
+    | server_id      | URI   | capsi:UUID | The UUID for the server to remove |
+    |                |       |            | from the server group.            |
+    +----------------+-------+------------+-----------------------------------+
+
+  * JSON schema definition for the body data::
+
+            {
+                "remove_server": {
+                    "server_id": "324dfb7d-f4a9-419a-9a19-237df04b443b"
+                }
+            }
+
+  * JSON schema definition for the response data::
+
+            {
+                "server_group": {
+                    "id": "5bbcc3c4-1da2-4437-a48a-66f15b1b13f9",
+                    "name": "test",
+                    "policies": [
+                        "anti-affinity"
+                    ],
+                    "members": [],
+                    "metadata": {}
+                }
+           }
+
+* Policy Changes: Right now, the server group APIs only apply role checking
+  at the compute_extension:server_groups level. Two new action-level
+  authorizations will be added so that the Nova policy.json file has the
+  ability to distinctly enumerate what roles can add or remove servers from
+  a server group. The following will be added:
+
+  * compute_extension:server_groups:add_server
+  * compute_extension:server_groups:remove_server
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+Nova notifications will be added for the following events:
+
+* A server being added to a server group
+
+* A server being removed from a server group
+
+Other end user impact
+---------------------
+
+In addition to the API, the user will be able to use the Nova CLI to add and
+remove instances to and from a server group, respectively. The CLIs will be
+of the form:
+
+* nova server-group-add-server <id> <server>
+
+* nova server-group-delete-server <id> <server>
+
+Where <id> represents the server group's identifier and <server> represents
+an instance's uuid or name. The uuid will be required in cases in which the
+name does not unambiguously identify a server.
+
+Performance Impact
+------------------
+
+Mechanism 3, that adds locking on the server group id around the policy
+validation and database updates in the "add a server to a server group API
+could cause performance hit when multiple calls to "add a server to a server
+group API" are called simultaneous. Each call would have to wait for the
+previous call to release the lock on the server group ID before it can check
+validate the policy and update the database.
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  jmulsow
+
+Other contributors:
+  jwcroppe
+
+Work Items
+----------
+
+Work items or tasks:
+
+* Add the API framework for adding and removing a server from a server group.
+* Add validation checking and quota management to the add/remove server flow.
+* Update the anit-affinity filter in the scheduler to filter out source and
+  destination hosts of ongoing operations of instances in the same server
+  group.
+* Add Nova CLIs for adding or removing a server from a server group.
+
+Dependencies
+============
+Open Question:
+Would folks prefer that we split this into two blueprints, one for addressing
+the concerns with the current server group implementation and another for the
+addition of the new APIs? Or would folks rather that we open Launchpad defects
+for the various items and then simply note that this blueprint also depends on
+those defects being resolved for a comprehensive solution?
+
+The following are existing issues in the code that need to be addressed.
+
+1. LP 1379451. The scheduler does not honor the policy of the server group
+   during cold migrate, live migrate or resize to a new host.
+2. Targeted live migration and cold migration do not call the scheduler's
+   "select_destinations" RPC method. The operations should ensure that the
+   specified host does not violate the policy of the server group.
+3. Existing race condtions with simultaneous deploys and live migrate, cold
+   migrate, and resize operations as outlined in the anti-affinity table above
+   need to be addressed.
+
+Testing
+=======
+
+Tempest tests will be added to tempest/api/compute/servers/test_server_group.py
+to test adding an existing instance to a server group and to test removing an
+instance from a server group.
+
+Documentation Impact
+====================
+
+Documentation will be needed to the Nova APIs and Nova CLIs for the two new
+actions being added for server groups.
+
+References
+==========
+
+Discussion on the openstack-dev mailing list:
+http://lists.openstack.org/pipermail/openstack-dev/2014-September/045636.html
+
-- 
1.9.1

