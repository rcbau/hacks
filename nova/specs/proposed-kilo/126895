From db1d51caa4a0ac825d45bbd6a849b433db38d926 Mon Sep 17 00:00:00 2001
From: Sylvain Bauza <sbauza@redhat.com>
Date: Wed, 8 Oct 2014 15:13:29 +0200
Subject: [PATCH] Propose Detach Service from ComputeNode

As this patch series requires DB migrations, a spec is proposed.

Change-Id: Ia261e9e15ac5596a1d0d5057ba5efbb0bab66833
---
 .../approved/detach-service-from-computenode.rst   | 169 +++++++++++++++++++++
 1 file changed, 169 insertions(+)
 create mode 100644 specs/kilo/approved/detach-service-from-computenode.rst

diff --git a/specs/kilo/approved/detach-service-from-computenode.rst b/specs/kilo/approved/detach-service-from-computenode.rst
new file mode 100644
index 0000000..8cffafb
--- /dev/null
+++ b/specs/kilo/approved/detach-service-from-computenode.rst
@@ -0,0 +1,169 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+================================
+Detach Service from Compute_Node
+================================
+
+https://blueprints.launchpad.net/nova/+spec/detach-service-from-computenode
+
+Remove the nested dependency in between Service and ComputeNode
+
+Problem description
+===================
+
+There is no good reason to keep a dependency in between a service, which is the
+representation of the message bus and a compute_node, which is a collection of
+resources for the solely use of the scheduler. It also creates a dependency
+in the internals of the Scheduler, while it is useless for it.
+The only reason why such a dependency exists is because there is a 1:N
+relationship in between a host and multiple nodes, but this representation
+should be present directly in compute_nodes table as a unique key for
+(host, node).
+
+Use Cases
+---------
+
+N/A
+
+Project Priority
+----------------
+
+This work is related to the effort of reducing technical debt.
+
+Proposed change
+===============
+
+Instead of having a relationship using a foreign key, the proposal will consist
+of adding a new field called 'host' for compute_nodes and a unique constraint
+on (host, hypervisor_hostname). Also, service_id field will be removed from
+compute_nodes table and ComputeNode object field service_id will be left unset.
+SQLA relationship on service will be deleted and Service object will keep a
+compute_node field but will actually not use this relationship.
+
+Alternatives
+------------
+
+Only change DB API to remove the relationship without changing callers but
+it would create some confusion and obfuscate the need of modifying accessors.
+
+Data model impact
+-----------------
+
+Most of the change is about changing the model, but let's rephrase it.
+compute_nodes.service_id and compute_nodes.service relationship
+will be deleted, and compute_nodes.host will be added as a String (identical
+to Service.host field).
+DB migrations will ensure that :
+
+ - host will be populated at upgrade using Service.host table thanks to
+   existing service_id and a unique key will be set on
+   (host, hypervisor_hostname)
+
+ - service_id will be populated at downgrade using host information that
+   matches Service.host
+
+There is no sense to keep a specific ID while the tuple (host, node) is
+identified as the source of truth for idenfifying compute nodes.
+
+When implementing these migrations [1], TurboHipster (aka. DB DataSet migration
+check) showed no problems with these upgrade and downgrade paths in terms of
+delay.
+
+ComputeNode object will still continue to have a service field but it will
+no longer use the relationship to get that info. In parallel, Service object
+will continue to have a nested ComputeNode object for backwards compatibility
+but won't also use the relationship to get that object.
+
+
+REST API impact
+---------------
+
+In order to preserve API stability, we will still provide service information
+when querying compute nodes but this extra information will be on a
+case-by-case basis thanks to an extra flag passed to the DB API asking to join
+service and compute_nodes tables on service.host == compute_nodes.host.
+We expect no performance penalty as it is already done this way in
+db.compute_node_get_all() with an INTEGER matching instead of a VARCHAR(255).
+
+No changes in the API model.
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+None
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+    sbauza
+
+Other contributors:
+    None
+
+Work Items
+----------
+
+Code was already posted as a patch series [1] :
+
+* Add host field to compute_nodes table
+* Add extra methods for querying this new field
+* Use these extra methods instead of querying Service for getting the node(s)
+* Make service info optional when querying compute nodes
+* Remove query by service_id on compute_nodes
+* Do not provide by default service info when querying compute nodes
+* Remove service_id field from compute_nodes and service relationship
+
+Dependencies
+============
+
+None
+
+Testing
+=======
+
+Current Tempest and unittests already cover this.
+
+Documentation Impact
+====================
+
+None
+
+References
+==========
+
+Formerly it was a bug:
+https://bugs.launchpad.net/nova/+bug/1357491
+
+[1]: https://review.openstack.org/#q,topic:bp/detach-service-from-computenode,n,z
\ No newline at end of file
-- 
1.9.1

