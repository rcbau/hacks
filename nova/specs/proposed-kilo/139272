From 819ae6b30ebad82a8f388f5e2f8afc7fb0818b88 Mon Sep 17 00:00:00 2001
From: Jennifer Mulsow <jmulsow@us.ibm.com>
Date: Thu, 4 Dec 2014 18:04:59 -0600
Subject: [PATCH] Nova specs doc for dynamic server groups - add

This is the documentation for
https://blueprints.launchpad.net/nova/+spec/dynamic-server-groups-add

Change-Id: I4fea7f6385e714da5f684affc8909460e8d53394
---
 specs/kilo/approved/dynamic-server-groups-add.rst | 390 ++++++++++++++++++++++
 1 file changed, 390 insertions(+)
 create mode 100644 specs/kilo/approved/dynamic-server-groups-add.rst

diff --git a/specs/kilo/approved/dynamic-server-groups-add.rst b/specs/kilo/approved/dynamic-server-groups-add.rst
new file mode 100644
index 0000000..6268b6c
--- /dev/null
+++ b/specs/kilo/approved/dynamic-server-groups-add.rst
@@ -0,0 +1,390 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+Dynamic Management of Server Groups
+==========================================
+
+https://blueprints.launchpad.net/nova/+spec/dynamic-server-groups-add
+
+This blueprint extends the functionality of "Server Groups" such that existing
+virtual machines can be added to a group at any time, instead of limiting it
+to at boot time only. By providing this added bit of functionality, server
+groups become orders of magnitude more operator-friendly and usable in many
+real-world scenarios.
+
+For the 'remove a instance from a server group' functionality, see:
+https://blueprints.launchpad.net/nova/+spec/dynamic-server-groups-remove
+
+Problem description
+===================
+
+Use Cases
+----------
+
+* As a cloud operator, I want to add an existing instance to a server group, so
+  that I can have more flexibility with respect to defining what instances will
+  have affinity rules since I may not necessarily know these rules at instance
+  creation time.
+
+Project Priority
+-----------------
+
+None
+
+Proposed change
+===============
+
+A new API will be added to the server group APIs in
+nova/api/openstack/compute/contrib/server_groups.py. This API will be a POST at
+server group members level. It will add an existing instance to a server group.
+
+When adding an instance from a server group, validation will need to be
+performed on the server_group_members quota value. The addition of that
+instance into the server group will be blocked if it exceeds the quota.
+
+When a user tries to add an instance to a server group, the API will need to
+check the hosts of all the instances in the group to compare with the host of
+the instance that is being requested to join. If the instance would violate the
+policy of the server group, then it will not be allowed to join.
+
+In addition to this check, the API to add an instance to a server group will
+need to ensure that servers could not be added in parallel to the same group
+that could cause a policy of the group to be violated. Currently, there are
+ways in which instances in a server group could be moved to a different host
+that would cause the policy to be violated. The addition of an API to add a
+server to a server group would add to these possibilities if proper care is
+not taken. The following part of this section will describe how race conditions
+will be addressed, both in the existing code, and with the addition of the new
+server group APIs outlined in this document. Also, reference the dependencies
+section for more info on open issues with the current code.
+
+In order to best convey the race conditions and the preventative measures that
+will be put into place, each condition has been inserted into a table that is
+linked to below. This table outlines scenarios involving a server group with
+anti-affinity policy only. Affinity is discussed after the anti-affinity table.
+
+The table is structured such that the first column represents the operation
+that the user is trying to perform on an instance in a server group, and the
+horizontal axis represents other actions that are going on in parallel to
+instances in the same server group. The last column describes how the scenario
+is prevented using one of the below mechanisms.
+
+Note: Row 3 through 6 (second 'deploy VM' row through first 'live migrate VM'
+row) represent scenarios in which the policy of a server group could be
+violated with the existing code today.
+
+Mechanism 1::
+
+  A user will not be allowed to add an existing instance to a sever group if
+  any of the following actions are being performed on any instances in the
+  server group: deploy, live migration, cold migration, and resize. This will
+  be checked in the "add server to a server group API", and a 409 HTTP error
+  code will be returned with a message explaining this to the user.
+
+  This check will prevent a timing window where the server group policy can be
+  violated due to an ongoing operation that places an instance on a new host
+  and a simultaneous call to the "add server to a server group API". It is also
+  needed because the cold migration, live migration, and resize operations
+  could be rolled back and potentially cause a policy violation. Adding this
+  logic is a straightforward way to deal with that situation.
+
+Mechanism 2::
+
+  For a server group with anti-affinity policy:
+  When selecting a host for placement for a deploy, cold migration, live
+  migration, or resize, the Nova scheduler will filter out source and target
+  hosts of instances belonging to the same server group that are currently
+  undergoing a cold migration, live migration, or resize. The Nova scheduler
+  will also filter out any target hosts of ongoing deploys of instances being
+  deployed to the same server group. The source and target hosts of an ongoing
+  resize will only be filtered out if they are not the same.
+
+  This additional logic will be added to the existing anti-affinity filter.
+  This additional logic is needed because these operations can be rolled back
+  and therefore could introduce policy violations for other operations that
+  occurred after the respective operation was initiated.
+
+  For example, currently an instance in a group with anti-affinity policy could
+  be migrating from Host A to Host B. At the same time a new instance could be
+  deployed in the same group on host A. If the migration fails, and the
+  instance is rolled back to Host A, the anti-affinity policy will be violated.
+  With this additional logic, this could not occur, since both the source and
+  target hosts for the migration would have not been considered for candidates
+  for the deploy operation.
+
+Mechanism 3::
+
+  As an extra precaution, the "add a server to a server group API" will do an
+  additional policy validation check after the database has been updated. If it
+  finds that the policy has been violated at this point, it will back out the
+  addition of this instance into the server group, and return an HTTP 409 code.
+
+Mechanism 4::
+
+  lockutils synchronization will be used on the server group ID at the API
+  level around the policy validation check and database update for the "add
+  a server to a server group API". This will be similar to the existing
+  synchronization in the compute manager when deploying an instance into a
+  server group.
+
+  This will prevent race conditions where simultaneous calls to the "add a
+  server to a server group API" could add multiple instances with conflicting
+  hosts to the server group's policy.
+
+  This will only be effective when there are not multiple API services running.
+  However, if there are multiple API services, then Mechanism 3 should be
+  sufficient in preventing simultaneous adds from violating the policy.
+
+Due to the 79 characters per line limit, the table for anti-affinity race
+conditions could not be displayed here in ASCII text. It is saved as a PDF
+in the following github repository.
+https://github.com/jmulsow/nova-specs-extras/raw/master/anti-affinity.pdf
+
+There are not as many race conditions to worry about when a server group has an
+affinity policy. Resizes to a different host, cold migrations, and live
+migrations will not be allowed on any instances in an affinity server group
+since instances can only ever be on a single host. The following are the
+scenarios that have the possibility of violating the policy of the server
+group.
+
+Scenario 1::
+
+  0. Server Group 1 is created with an 'affinity' policy
+  1. VM-1 is deployed to host A in Server Group 1
+  2. VM-2 is deployed to host A in Server Group 1 and finishes before VM-1
+     finishes
+  3. VM-1 deploy eventually fails, so it would generally reschedule... but
+     since VM-2 was added to the group, rescheduling should be disabled since
+     the policy would be violated
+
+Scenario 2::
+
+  The "add a server to a server group API" is called to add an instance on
+  Host A to a server group with the affinity policy. There is an ongoing
+  deploy at the same time that is deploying an instance to Host B and assigning
+  it to the same server group. This scenario will be prevented with Mechanism
+  1. The add server to a server group API will return a 409 because it will
+  find that there is an ongoing deploy for an instance in this server group.
+
+Alternatives
+------------
+
+The alternative to this would be to retain the existing behavior where a user
+may only add an instance to a server group at boot time. Once an instance is
+created, it cannot join a server group.
+
+If this route is chosen, the existing race conditions and other issues outlined
+in the dependencies section will still need to be addressed.
+
+Data model impact
+-----------------
+
+None. The existing instance group data models can be used. No additions needed.
+
+REST API impact
+---------------
+
+New API to add a a server to a server group
+
+* Specification for the method
+
+  * Adds a server to a server group
+
+  * Method type: POST
+
+  * Normal http response code: 200
+
+  * Expected error http response code:
+
+    * 400 - invalid request::
+
+          This response code will be returned if the addition of this server
+          would violate a policy of the server group, exceed the server group
+          members quota value, or if a required parameter is missing from the
+          request.
+
+    * 404 - not found::
+
+          This response code will be returned if the server group or server
+          passed in does not exist.
+
+    * 409 - conflict::
+
+          This response code will be returned if the instance passed in has a
+          pending task. In addition, it will also be returned if any instance
+          belonging to the server group passed in is currently undergoing any
+          of the following: resize, cold migration, or live migration.
+
+  * URL: /v2/{tenant_id}/os-server-groups/{ServerGroup_id}/members
+
+  * Parameters:
+
+    +----------------+-------+------------+-----------------------------------+
+    |  Parameter     | Style |   Type     |  Description                      |
+    +================+=======+============+===================================+
+    | tenant_id      | URI   | xsd:string | The ID for the tenant or          |
+    |                |       |            | account in a multi-tenancy cloud. |
+    +----------------+-------+------------+-----------------------------------+
+    | ServerGroup_id | URI   | String     | The server group ID.              |
+    +----------------+-------+------------+-----------------------------------+
+    | server_id      | URI   | capsi:UUID | The UUID for the server to add to |
+    |                |       |            | the server group.                 |
+    +----------------+-------+------------+-----------------------------------+
+
+  * JSON schema definition for the body data::
+
+           {
+               "add_server": {
+               "server_id": "324dfb7d-f4a9-419a-9a19-237df04b443b"
+               }
+           }
+
+  * JSON schema definition for the response data::
+
+        {
+            "members": [
+                {
+                    "server": {
+                        "id": "324dfb7d-f4a9-419a-9a19-237df04b443b",
+                        "links": [
+                            {
+                                "href": "http://openstack.example.com/"
+                                        "openstack/servers/"
+                                        "324dfb7d-f4a9-419a-9a19-237df04b443b",
+                                "rel": "bookmark"
+                            }
+                        ],
+                        "name": "get-members-test"
+                    },
+                    "links": [
+                        {
+                            "href": "http://openstack.example.com/v2/"
+                                    "openstack/os-server-groups/"
+                                    "227c6f51-e94c-4b5d-baec-3516123485db/"
+                                    "members/"
+                                    "324dfb7d-f4a9-419a-9a19-237df04b443b",
+                            "rel": "self"
+                        },
+                        {
+                            "href": "http://openstack.example.com/"
+                                    "openstack/os-server-groups"
+                                    "227c6f51-e94c-4b5d-baec-3516123485db/"
+                                    "members/"
+                                    "324dfb7d-f4a9-419a-9a19-237df04b443b",
+                            "rel": "bookmark"
+                        }
+                    ]
+                }
+            ]
+        }
+
+
+* Policy Changes: A new authorization will be added so that the Nova
+  policy.json file has the ability to distinctly enumerate what roles can add
+  an instance to a server group.
+  The following action will be required in the policy to add a server to a
+  server group:
+
+  * compute_extension:server_group_members:add
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+No new notifications required. A servergroup.addmember notification already
+exists.
+
+Other end user impact
+---------------------
+
+In addition to the API, the user will be able to use the Nova CLI to add an
+instances to a server group. The CLI will be of the form:
+
+* nova server-group-add-member <id> <member
+
+Where <id> represents the server group's identifier and <member> represents
+an instance's uuid or name. The uuid will be required in cases in which the
+name is ambiguous.
+
+Performance Impact
+------------------
+
+Mechanism 4, that adds locking on the server group id around the policy
+validation and database updates in the "add a server to a server group API
+could cause performance hit when multiple calls to "add a server to a server
+group API" are called simultaneous. Each call would have to wait for the
+previous call to release the lock on the server group ID before it can check
+validate the policy and update the database.
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  jmulsow
+
+Other contributors:
+  jwcroppe
+
+Work Items
+----------
+
+Work items or tasks:
+
+* Add member level add API to the Server Group API v2 extensions.
+* Add member level add API to the v3 Server Group APIs.
+* Add Nova CLI for adding a server from a server group.
+* Add Nova integration API sample tests to cover the new API.
+* Add new tempest tests.
+
+Dependencies
+============
+The following are existing issues in the code that need to be addressed.
+
+1. LP 1379451. The scheduler does not honor the policy of the server group
+   during cold migrate, live migrate or resize to a new host.
+2. Targeted live migration and cold migration do not call the scheduler's
+   "select_destinations" RPC method. The operations should ensure that the
+   specified host does not violate the policy of the server group.
+3. Existing race conditions with simultaneous deploys and live migrate, cold
+   migrate, and resize operations as outlined in the anti-affinity table above
+   need to be addressed.
+
+Testing
+=======
+
+Unit tests, including integrated API sample tests and tempest tests will be
+added.
+
+Documentation Impact
+====================
+
+Documentation will be needed to the Nova APIs and Nova CLIs for the two new
+actions being added for server groups.
+
+References
+==========
+
+Discussion on the openstack-dev mailing list:
+http://lists.openstack.org/pipermail/openstack-dev/2014-September/045636.html
+
-- 
1.9.1

