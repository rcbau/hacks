From e933c71290faec3591abb6650b009288c8538cf0 Mon Sep 17 00:00:00 2001
From: Steven Kaufer <kaufer@us.ibm.com>
Date: Thu, 13 Nov 2014 16:10:34 +0000
Subject: [PATCH] Nova Server Count API Parameter

Proposes a new v2.1 REST API query parameter that returns the
number of servers that match the specified search criteria in the
body of the existing GET servers reply.

Note that a /servers/count API extension was approved for juno but
this spec is being changed to return the count information based on
the existence of an "include_count=1" parameter.

bp server-count-api
APIImpact

Change-Id: I282d6c6b2bf263543a2e6f9298c8ddbd49df75eb
---
 specs/kilo/approved/server-count-api.rst | 254 +++++++++++++++++++++++++++++++
 1 file changed, 254 insertions(+)
 create mode 100644 specs/kilo/approved/server-count-api.rst

diff --git a/specs/kilo/approved/server-count-api.rst b/specs/kilo/approved/server-count-api.rst
new file mode 100644
index 0000000..35320ba
--- /dev/null
+++ b/specs/kilo/approved/server-count-api.rst
@@ -0,0 +1,254 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+====================================
+Nova Server Count v2.1 API Parameter
+====================================
+
+https://blueprints.launchpad.net/nova/+spec/server-count-api
+
+This blueprint proposes a new v2.1 REST API query parameter that returns the
+number of servers that match the specified search criteria in body of the
+existing GET servers reply.
+
+
+Problem description
+===================
+
+When retrieving servers, there is no mechanism to determine the total number
+of instances that match a variety of search files. For example, when using
+paginated queries to retrieve both a page of servers and the total number of
+servers in a given state.
+
+Retrieving all servers and then manually determining the count data does not
+scale because pagination queries must be implemented (see Alternatives section
+for a detailed explanation).
+
+Use Cases
+---------
+
+Assume that the UI supports tables that show filtered data (ie, table just
+showing instances in 'error' state) and uses pagination to get the data. Many
+users do not like "infinite scrolling" where they have no idea how many items
+really are in the list (more just show up as you scroll down or navigate to
+the next page). Using this new count API support, the UI table can indicate
+how many total items are in the list (ie, showing 1-20 of 1000).
+
+Assume that you have 500 instances in error state and that you can open a UI
+table showing their details -- when creating the table, assume that the UI
+uses a page size of 100. In this case, the admin logs into the UI and wants to
+know how many servers are in error state. In order to do this, the admin
+navigates to the 'servers in error state' table -- the UI only retrieves the
+first 100 items so it impossible to know if there are 101 total items or 500
+total items. As an admin, I would like to know what the total number of items
+in the table is.
+
+Note that the value of knowing the total count decreases as count grows larger;
+for example, knowing that you are seeing "1-5 of 5000" or "1-5 of 10000"
+provides less value then knowing if you are seeing "1-5 of 6" or "1-5 of 20" or
+"1-5 of 50".
+
+Project Priority
+----------------
+
+None.
+
+Proposed change
+===============
+
+The functionality of the existing v2.1 /servers and /servers/detail APIs do not
+change. If the user supplies the "include_count=1" query parameter then, in
+addition to the server data already being supplied, the API also returns the
+total number of servers that matches the query.
+
+The "include_count" query parameter will be both per tenant and global
+(admin-only), similar to the existing /servers APIs. An admin can supply the
+'all_tenants' parameter to signify that server count data should be retrieved
+globally.
+
+This new flow will occur in the same RPC. The existing functions in the compute
+and instance layer will be modified to return a tuple with the servers and
+total count. At the DB layer, new count functions will be added to retrieve
+the count only. For example:
+
+* Compute API: get_all function conditionally returns a tuple of
+  (servers, count)
+
+* Instance layer (InstanceList class): get_by_filters function conditionally
+  returns a tuple of (servers, count)
+
+* DB layer: New instance_count_by_filters function
+
+* Sqlalchemy layer: New instance_count_by_filters function
+
+In the sqlalchemy DB layer, the filter processing (for processing exact name
+filters, regex filters, and tag filters) needs to be moved into a common
+function so that both the new count API support and the existing get servers
+APIs can utilize it. Once the query object is created, then the count()
+function is invoked to retrieve the total number of matching servers for the
+given query.
+
+The existing filtering pre-processing done in
+nova.api.openstack.compute.plugins.v3.servers.Controller._get_servers
+needs to be moved into a static utility method so that the count processing
+can utilize it; this is critical so that the filtering support for the count
+processing matches the filtering support for the /servers API.
+
+Note, the code should support returning the count without any server data;
+this would be satisfied by supplying limit=0 with include_count=1.
+
+Alternatives
+------------
+
+Other APIs exist that return count data (quotas and limit) but they do not
+accept filter values.
+
+A user could determine the total number of instance using the existing non-
+detailed /servers API with a filter and then count up the results. For
+example, if the total cloud has 5k VMs then doing paginated queries to iterate
+over the non-detailed '/servers' API with a filter and limit/marker is really
+inefficient -- the API is going to return more data than the user cares about
+(and do a lot of processing to get it).  Assume that there are 2,500 instances
+in an active state; if the non-detailed query (and the default limit of 1k) is
+used then the application would have to make 3 separate REST API calls to get
+the all of the VMs and, at the DB layer, the marker processing would be used
+to find the correct page of data to return.  Since the user only cares about a
+summary count, then the most efficient mechanism to retrieve that data would be
+a single DB query using the count() function.
+
+Note that the default maximum page set is set on the server (default of 1k);
+therefore, a user MUST HANDLE pagination since the number of items being
+queried may be greater then the default.
+
+A v2.1 API extension count be created in order to conditionally honor the new
+query parameter.
+
+Data model impact
+-----------------
+
+None
+
+REST API impact
+---------------
+
+The response for the existing /servers and /servers/detail v2.1 REST APIs will
+only be affected if the user supplies the include_count=1 parameter.
+
+* NEW v2.1 URLs with include_count parameter:
+
+  * v2.1/{tenant_id}/servers?include_count=1
+  * v2.1/{tenant_id}/servers/detail?include_count=1
+
+* Method type: GET
+
+* Normal Response Codes: Same as the 'v2/{tenant_id}/servers' API):
+
+* Error Response Codes (same as the 'v2/{tenant_id}/servers' API):
+
+* New parameter:
+
++---------------+-------+---------+-----------------------------------------+
+| Parameter     | Style | Type    | Description                             |
++===============+=======+=========+=========================================+
+| include_count | query | xsd:int | Display server count information in the |
+| (optional)    |       |         | server_links if 1.                      |
++---------------+-------+---------+-----------------------------------------+
+
+* JSON schema definition for the body data: N/A
+
+* JSON schema definition for the response data:
+
+The total_count will be a new integer in reply.
+
+> {
+>     "servers": [...],
+>     "server_links": [...],
+>     "total_count": 1500
+> }
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+If the include_count parameter is supplied, then an additional DB operation
+will executed. However, both of these DB operations will be executed in the
+same RPC.
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  Steven Kaufer (kaufer)
+
+Other contributors:
+  <launchpad-id or None>
+
+Work Items
+----------
+
+* Move filter processing code into utility functions at the API layer and at
+  the DB sqlalchemy layer.
+* Update/create the API functions in the various layers to return the count
+  data.
+* v2.1 API support to honor the "include_count" query parameter.
+
+
+Dependencies
+============
+
+None
+
+
+Testing
+=======
+
+Both unit and Tempest tests need to be created to ensure that the count data
+is accurate for various filters.
+
+Testing should be done against multiple backend database types.
+
+
+Documentation Impact
+====================
+
+Document the new v2.1 API query parameter (see "REST API impact" section for
+details).
+
+
+References
+==========
+
+Mailing list thread for counting resources:
+https://www.mail-archive.com/openstack-dev@lists.openstack.org/msg40287.html
+
-- 
1.9.1

