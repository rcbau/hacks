From 2b86f8497cf88bb8503eb0bad843bfddc3ac7778 Mon Sep 17 00:00:00 2001
From: EdLeafe <ed@leafe.com>
Date: Tue, 2 Dec 2014 11:12:17 -0600
Subject: [PATCH] Remove direct nova DB/API access by Scheduler Filters

Some filters need information about the current instances on a host in
order to make their decisions. Currently they get their filtering
criteria by accessing the nova DB or API directly. This spec proposes
replacing those occurrences with an in-memory view of the hosts and
their instances that would be maintained by the Scheduler. This
information would be loaded when the Scheduler starts up, and will be
updated by the compute nodes whenever their instances change.

Change-Id: Id90a699ab8d456e7a8a66637b738aa373e12e736
---
 .../kilo/approved/isolate-scheduler-db-filters.rst | 173 +++++++++++++++++++++
 1 file changed, 173 insertions(+)
 create mode 100644 specs/kilo/approved/isolate-scheduler-db-filters.rst

diff --git a/specs/kilo/approved/isolate-scheduler-db-filters.rst b/specs/kilo/approved/isolate-scheduler-db-filters.rst
new file mode 100644
index 0000000..2f7ba0a
--- /dev/null
+++ b/specs/kilo/approved/isolate-scheduler-db-filters.rst
@@ -0,0 +1,173 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==================================
+Isolate Scheduler DB for Instances
+==================================
+
+https://blueprints.launchpad.net/nova/+spec/isolate-scheduler-db
+
+As part of the above blueprint, several scheduler filters have been identified
+as directly accessing the nova db, or calling the nova compute API. These need
+to be changed in order to allow the eventual separation of the scheduler into
+its own service (i.e., the Gantt effort).
+
+
+Problem description
+===================
+
+There are three scheduler filters currently that need to access the nova
+compute API or the nova DB in order to work:
+
+* TypeAffinityFilter
+* SameHostFilter
+* DifferentHostFilter
+
+The first needs to know all the flavors on a host, and the others need to know
+the UUIDs of all instances on the host.  Their current method of api/db access
+prevents the scheduler from being separated as an indpendent service. These
+filters need to be updated to use host state objects in the scheduler instead
+of accessing the db directly or calling the nova compute API.
+
+
+Use Cases
+----------
+
+N/A
+
+Project Priority
+-----------------
+
+This blueprint is part of the 'scheduler' refactoring effort, defined as a
+priority for the Kilo release.
+
+
+Proposed change
+===============
+
+Rather than have the filters make DB or API calls, we will replace those calls
+with code that uses an in-memory view of the compute nodes and their instance
+information. This information would be populated initially when the Scheduler
+starts up, and would be updated by the compute service whenever a significant
+change happens to any of its instances (create/ destroy/ resize). The
+`update_resource_stats()` method of the ResourceTracker will be augmented to
+also pass along the InstanceList object corresponding to the instances on the
+host. The Scheduler would maintain this InstanceList in memory for each host,
+and the filters would access the information that they need about the instances
+on a host from this object instead of making DB / API calls for each host.
+
+Alternatives
+------------
+
+An alternative design would be to add instance information to the hosts
+returned in the current _get_all_host_states() call. This would require adding
+a new field to the host object that would contain the InstanceList object
+corresponding to the current state of that host's instances. The field would be
+lazy-loaded to minimize unnecessary overhead. This approach is less desireable,
+since it perpetuates the practice of the scheduler making the call to
+_get_all_host_states() with each request to schedule an instance.
+
+
+Data model impact
+-----------------
+
+None. There is no extra information to persist, as the scheduler will maintain
+this information in memory.
+
+REST API impact
+---------------
+
+None.
+
+Security impact
+---------------
+
+None.
+
+Notifications impact
+--------------------
+
+None.
+
+Other end user impact
+---------------------
+
+None.
+
+Performance Impact
+------------------
+
+There will be some improvement once the need to make the _get_all_host_states()
+call is removed, but this change in and of itself will only make the overall
+process slightly better, as it will be removing DB and API calls from the 3
+filters that currently rely on these calls.
+
+Other deployer impact
+---------------------
+
+None.
+
+Developer impact
+----------------
+
+None.
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  edleafe
+
+Other contributors:
+  None.
+
+Work Items
+----------
+
+  - Update the ResourceTracker object to add the required instance information
+    in its update_resource_stats() method
+  - Update the Scheduler to obtain the initial state of compute nodes and their
+    instances upon initialization
+  - Update the Scheduler to handle instance information received in
+    update_resource_stats()
+  - Remove the current db/api calls in the filters, and replace them with
+    methods that only rely on the Scheduler's in-memory view of the hosts and
+    their instances
+
+
+Dependencies
+============
+
+None.
+
+
+Testing
+=======
+
+The filters already have sufficient test coverage, but these tests currently
+mock out the db/api calls. They will have to be updated to reflect the new
+implementation.
+
+The tests for the ComputeNode object will have to be updated to reflect the new
+field.
+
+
+Documentation Impact
+====================
+
+None.
+
+
+References
+==========
+
+This work is a subset of the effort outlined in this spec:
+
+https://review.openstack.org/#/c/89893/
-- 
1.9.1

