From ecd109e84f62b015d8a4cb3c007ad03e88cbe6fc Mon Sep 17 00:00:00 2001
From: yunhong jiang <yunhong.jiang@intel.com>
Date: Wed, 3 Dec 2014 11:36:33 -0700
Subject: [PATCH] More image properties support

Currently nova checks for only a limited image properties, such as
'architecture', 'hypervisor_type', 'vm_mode'.

However, an image may have other constrainsts, to ensure optimal
performance, and/or to meet regulatory requirements. For instance,
an image may require a specific CPU capability such as Intel
AES-NI instruction set support, or be constrained to run in only
certain geographic localities because it uses a crypto algorithm
that may not be exported or because certain data may not leave the
country, or there is need for special purpose PCIe device support
such as for digital signal processing or crypto acceleration.

Such constraints are typically known by the image creator/appliance
vendor and readily provided as image metadata. Directly using such
metadata avoids the need to specify the same via flavor
extra-specs.

Blueprint: more-image-properties

Co-Authored-By: Bhandaru, Malini K <malini.k.bhandaru@intel.com>
Co-Authored-By: Jiang, Yunhong <yunhong.jiang@intel.com>

Change-Id: I1cef6d7e84500791b733db6ae2addf808ec8edd4
---
 specs/kilo/approved/more-image-properties.rst | 272 ++++++++++++++++++++++++++
 1 file changed, 272 insertions(+)
 create mode 100644 specs/kilo/approved/more-image-properties.rst

diff --git a/specs/kilo/approved/more-image-properties.rst b/specs/kilo/approved/more-image-properties.rst
new file mode 100644
index 0000000..5aa019a
--- /dev/null
+++ b/specs/kilo/approved/more-image-properties.rst
@@ -0,0 +1,272 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+More image properties
+==========================================
+
+Include the URL of your launchpad blueprint:
+
+https://blueprints.launchpad.net/nova/+spec/more-image-properties
+
+Currently nova checks for only a limited number of image properties,
+such as 'architecture', 'hypervisor_type', and 'vm_mode'.
+
+However, an image may have other constraints to ensure optimal performance
+and/or to meet regulatory requirements. For instance, an image may require a
+specific CPU capability such as Intel AES-NI instruction set support, or be
+constrained to run in only certain geographic localities because it uses a
+crypto algorithm that may not be exported or because certain data may not
+leave the country, or there is a need for special purpose PCIe device support
+such as for digital signal processing (DSP) or crypto acceleration.
+
+Such constraints are typically known by the image creator/appliance vendor
+and readily provided as image metadata. Directly using such metadata avoids
+the need to specify the same via flavor extra-specs.
+
+Problem description
+===================
+
+An image can have specific requirements of the host environment. For example,
+an image may need some specific CPU capability, or need PCI devices like an
+encryption or DSP card.
+
+Currently Glance supports associating a rich set of properties, as metadata,
+with an image. The Graffiti effort https://wiki.openstack.org/wiki/Graffiti
+expands this to all OpenStack resources, allowing predefined and new tag and
+meta data associations. Nova checks only for a limited set of image metadata,
+such as,'architecture', 'hypervisor_type', 'vm_mode' and  numa related
+properties.
+
+Use Cases
+----------
+
+1) An appliance vendor releases a VPN image, which utilizes the IPSec library.
+To achieve an advertised quality of VPN service, the vendor recommends
+launching the virtual appliance on a compute node that provides AES-NI support.
+
+2) An ISV releases an image that uses strong, export restricted, encryption.
+The ISV will tag the image to restrict the geos where it may run.  By
+specifying the geo constraint on the image, the image provider is providing
+information to the cloud provider to ensure compliance and enforce it.
+
+Project Priority
+-----------------
+
+This is not in the kilo priorities, but these changes should be small and only
+impact the specific scheduler filters.
+
+Proposed change
+===============
+
+We will add several image properties and enhance the scheduler/filters to
+support these image properties. Below we list the properties and the
+corresponding changes.
+
+Please note that in all those image properties, the flavor takes
+precedence over the image properties.  The reason for the same is
+because the flavor is a restriction defined by cloud provider, and more
+likely then used for accounting/billing. This blueprint is no exception
+in this respect, there is precedence to this effect in how Numa and
+large page table feature request is handled. Refer to
+https://github.com/openstack/nova/blob/master/nova/virt/hardware.py.
+
+Conflicting flavor and image specified properties can be detected during the
+feature constraint reconciliation phase and an exception raised early before
+even attempting to find hosts that satisfy the requirements.
+
+1) Name:
+        trusted_host
+   Data:
+        A string with 'true' or 'false', case insensitive.
+   Usage:
+        The image should only be executed on a host that runs software
+        with verified valid measurements, i.e. trusted host. (see
+        http://docs.openstack.org/admin-guide-cloud/content\
+        /trusted-compute-pools.html for more information of trusted host)
+   Changes required:
+        The request for trusted_host from image properties and from flavor
+        extra_spec are reconciled and saved in
+        filter_properties['trusted_host'] before sending to the scheduler.
+        The flavor's properties take precedence and the value of
+        filter_properties['trusted_host'] is defined as captured in the
+        table below.
+
+        +----------------+----------------------+-------------------+
+        | Image Property | Flavor               | filter_properties |
+        +================+======================+===================+
+        | True           | True                 | True              |
+        +----------------+----------------------+-------------------+
+        | True           | False or Unspecified | Error*            |
+        +----------------+----------------------+-------------------+
+        | False or       | True                 | True              |
+        | Unspecified    |                      |                   |
+        +----------------+----------------------+-------------------+
+        | False or       | False  or            | False             |
+        | Unspecified    | Unspecified          |                   |
+        +----------------+----------------------+-------------------+
+
+        * If image requests trusted_host while flavor does not request it, an
+          exception is raised and the attempt to boot the instance results
+          in error.
+
+        The trusted_filter will be updated to fetch the request from the
+        filter properties, instead of the flavor extra specs.
+
+2) Name:
+        pci_request
+   Data:
+        A list of PCI specs separated by ','. Each spec is a triple consisting
+        of 'count:vendor_id:product_id'.
+   Changes required:
+        Currently the compute/api.py combines the pci request from flavor and
+        sriov port. The checking for the image request will be added.
+
+        The check will translate the image properties format to a list of
+        dict. For example, image properties expressed as "3:v1:p1, 6:v2:p2"
+        will be translated to:
+
+         [{'count': 3, 'vendor_id': 'v1', 'product_id': 'p1'},
+          {'count': 6, 'vendor_id': 'v2', 'product_id': 'p2'}]
+
+        When the image has no pci request, or the image's pci request is a
+        subset of the flavor's pci request, then no change to current
+        implementation, i.e. a combination of flavor pci request and sriov port
+        pci request.
+
+        Subset means the image pci request can be accomplished
+        by flavor's pci request. For example, if image's pci request is
+        {'count': 3, 'vendor_id': 'v1', 'product_id': 'p1'},
+        it's a subset of pci request
+        {'count': 4, 'vendor_id': 'v1', 'product_id': 'p1'},
+        but is not subset of
+        {'count': 2, 'vendor_id': 'v1', 'product_id': 'p1'} or
+        {'count': 4, 'vendor_id': 'v2', 'product_id': 'p1'}.
+
+        If the image has pci request, but it is not a subset of
+        flavor's pci request, or if the flavor has no pci request, an
+        exception is raised, and the attempt to boot the instance results in
+        error.
+
+3) Name:
+        capabilities_cpuinfo_features
+   DataType:
+        A string that specify a list of cpu features separated by white space
+        and preceded by extra_specs operators. For examples, "<in> aes"
+        requires cpu feature aes, "<all-in> aes vmx" requires cpu featuers aes
+        and vmx. This is the same format as current flavor extra_specs for the
+        compute capability filter.
+        The supported extra_specs ops are 'in', 'eq' and 'all_in'.
+
+        The cpu feature definition is the same as that reported by the libvirt
+        virt driver on a call to get_available_resource(). More definitions
+        can be added in future as needed.
+   Changes:
+        Currently the flavor cpu feature request is specified with key
+        'capabilities:cpu_info:features' in flavor extra specs and the only
+        meaningful extra_spec_ops for cpu feature request are 'in', 'eq' and
+        'all_in'.
+
+        To support cpu feature request from image, two changes are needed.
+
+        First, the cpu feature requests from image and flavor are reconciled.
+        If the image has a cpu feature request, but the flavor does not have,
+        or if the image's cpu feature request is not a subset of flavor's
+        request, an exception is raised, and the attempt to boot the instance
+        results in error. If the image's cpu feature request is a subset of
+        flavor's request, the flavor's cpu feature request, including the
+        extra specs operator, is saved in filter_properties['cpuinfo_feature']
+
+        Second, the compute_capabilities filter will updated to check also the
+        filter_properties['cpuinfo_feature'], instead of only the information
+        from flavor extra_specs.
+
+Alternatives
+------------
+
+1) One of the arguments is that all constraints should come from the 'flavor'
+object. This view has detractors evidenced by the fact that today we support
+associating properties with an image. Also, as discussed, often times the
+appliance vendor has a better idea of minimal requirements to ensure a certain
+quality of service, performance, or regulatory requirements.
+
+2) Modifying just the image_properties filter versus checking on separate
+filters like trusted filter or PciPassthrough filter. This would result in
+significant code duplication.
+
+Data model impact
+-----------------
+
+N/A
+
+REST API impact
+---------------
+
+Error returned if try to boot from image with the constraints properties
+specified but not supported by the flavor request.
+
+Security impact
+---------------
+
+N/A
+
+Notifications impact
+--------------------
+
+N/A
+
+Other end user impact
+---------------------
+
+End user can now tag image properties for the instance constraints.
+End user may fail to boot from image with the constraints properties.
+
+Performance Impact
+------------------
+
+There should be no performance impact.
+
+Other deployer impact
+---------------------
+
+The deployer should be made aware of the new image properties support in Nova.
+
+Developer impact
+----------------
+
+N/A
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+yunhong-jiang <yunhong.jiang@intel.com>
+
+Work Items
+----------
+
+Changes to the different filters.
+
+Dependencies
+============
+
+N/A
+
+Testing
+=======
+
+We need to add testing to make sure the image properties are respected in nova.
+
+Documentation Impact
+====================
+
+The document should be updated to reflect the new image properties supported.
+
+References
+==========
+N/A
-- 
1.9.1

