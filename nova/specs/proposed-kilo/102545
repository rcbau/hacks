From b0b56109e3e0de1181b428340ac03107220db43b Mon Sep 17 00:00:00 2001
From: Johannes Erdfelt <johannes@erdfelt.com>
Date: Wed, 25 Jun 2014 07:21:04 -0700
Subject: [PATCH] Online Schema Changes

Make schema changes execute online (ie while services are running) when
safely and semantically possible. This will allow operators to reduce the
amount of downtime currently required during deploys by running most
database schema changes when services are running.

Change-Id: Ibbab7cb29911d52b57c467c6bfbc5876d1102e79
---
 specs/kilo/approved/online-schema-changes.rst | 276 ++++++++++++++++++++++++++
 1 file changed, 276 insertions(+)
 create mode 100644 specs/kilo/approved/online-schema-changes.rst

diff --git a/specs/kilo/approved/online-schema-changes.rst b/specs/kilo/approved/online-schema-changes.rst
new file mode 100644
index 0000000..ac58ad6
--- /dev/null
+++ b/specs/kilo/approved/online-schema-changes.rst
@@ -0,0 +1,276 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+=====================
+Online Schema Changes
+=====================
+
+https://blueprints.launchpad.net/nova/+spec/online-schema-changes
+
+Make schema changes execute online (ie while services are running) when
+safely and semantically possible. This will allow operators to reduce the
+amount of downtime currently required during deploys.
+
+
+Problem description
+===================
+
+* All database migrations are currently required to be run offline.
+
+* Database migrations have historically been a source of lengthy downtime
+  during deployments.
+
+
+Use Cases
+---------
+
+Any deployer that would like to reduce the amount of downtime during
+deploys. Developers that would like to spend less time writing database
+migrations.
+
+
+Project Priority
+----------------
+
+This fits under the 'Live Upgrades' kilo priorities.
+
+
+Proposed change
+===============
+
+A parallel workflow to the existing 'db sync' command to nova-manage will
+be added. This will dynamically determine the differences between the
+running schema and the database model in Nova and generate DDL statements
+to make the running schema match the model.
+
+Three new nova-manage commands will be added:
+
+#. expand. This would apply changes that are compatible with old running
+   code.
+#. migrate. This would apply changes that are necessary to be run offline.
+#. contract. This would apply changes that are compatible with new
+   running code.
+
+Those schema changes that can be safely and semantically applied while
+running online will be applied during the expand and contract phases. All
+other schema changes will be applied during the migrate phase.
+
+The three new commands would be built by dynamically executing alembic's
+autogenerate and DDL generating features. A list of differences would
+be generated by alembic and then DDL statements would be generated using
+a separate feature of alembic.
+
+The set of DDL statements that can be run in each phase would be dictated
+by the database software used (eg MySQL, PostgreSQL, etc), the version of
+the database software (eg MySQL 5.5, 5.6, etc) and the storage engine used
+(eg InnoDB, TokuDB, etc).
+
+It is intended that the initial set that will run online will be
+conservative at first and a subset of what is possible to run safely.
+
+Schema changes that will be potentially performed during expand:
+- Table creates
+- Column additions
+- Non-Unique Index additions
+
+Schema changes that will be potentially performed during migrate:
+- Unique Index additions/drops
+- Foreign Key additions/drops
+
+Schema changes that will be potentially performed during contract:
+- Table drops
+- Column drops
+- Non-Unique Index drops
+
+Those schema changes that cannot be generated automatically will be
+forbidden. As an example, column type changes will no longer be allowed
+because it is generally not safe to be executed online and it is
+difficult to automate on all databases.
+
+The migrate and contract phases would verify that the previous phases
+(expand in the case of migrate, expand and migrate in the case of
+contract) no longer need to be executed before continuing.
+
+This would be performed by generating the list of needed changes for
+the previous phases and verifying the list is empty. This indicates the
+previous phases were either run or unnecessary.
+
+A new '--dryrun' argument would print, instead of execute, each
+generated DDL statement. This could be used by database administrators
+to see what would be executed for a particular phase. These can be
+optionally executed manually if desired. The schema synchronizer will
+not generate that DDL statement since the running schema does not
+have that difference anymore.
+
+When 'db contract' is finally run, the version in the migrate_version
+table would be updated to the latest version. This would maintain
+compatibility with the existing sqlalchemy-migrate based migrations.
+
+It is intended that eventually the use of sqlalchemy-migrate would
+be dropped in the future.
+
+
+Alternatives
+------------
+
+Splitting the existing single stream of migrations into three separate
+streams of migrations. This would allow some schema changes to be
+executed online.
+
+This limits the schema changes that can be safely executed online to
+that of the lowest common denominator of databases supported by Nova.
+
+This would also require changes to sqlalchemy-migrate to be able to
+manage seperate streams of migrations.
+
+Another option would be remove the use of sqlalchemy-migrate for schema
+changes altogether. The 'db sync' command to nova-manage would be
+implemented by effectively calling 'db expand', 'db migrate' and
+'db contract'.
+
+
+Data model impact
+-----------------
+
+None
+
+
+REST API impact
+---------------
+
+None
+
+
+Security impact
+---------------
+
+None
+
+
+Notifications impact
+--------------------
+
+None
+
+
+Other end user impact
+---------------------
+
+None
+
+
+Performance Impact
+------------------
+
+Running online DDL changes can affect the performance of a running system.
+This is optional and is only done when the deployer explicitly requests
+it.
+
+This can mitigated by the deployer by scheduling the expand and contract
+phases to be run during periods of low activity. The expand phase can
+be run an arbitrary amount of time before the migrate phase. Likewise,
+the contract phase can be run an arbitrary amount of time after the
+migrate phase.
+
+
+Other deployer impact
+---------------------
+
+The expand and contract phases are optional. If not explicitly run
+otherwise, the existing call to 'nova-manage db sync' would execute all
+necessary schema changes, as is the existing behavior.
+
+Those deployers that want to take advantage of the online schema changes
+will need to run the 'db expand', 'db migrate' and 'db contract' commands
+at the appropriate steps in their deployment process.
+
+Deployers that have made local schema changes (extra indexes, columns,
+tables, etc) will need to update the model to ensure those additions
+aren't dropped during the contract phase.
+
+
+Developer impact
+----------------
+
+Eventually no more sqlalchemy-migrate migrations would need to be written
+leading to less work for developers.
+
+No more migration compaction. The initial creation of tables for a
+database is handled completely by the schema synchronizer.
+
+Some schema changes will no longer be allowed. This is generally
+restricted to schema changes that cannot be reasonably automated but
+those schema changes are generally the ones with the most downtime
+anyway.
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  johannes.erdfelt
+
+Other contributors:
+  None
+
+
+Work Items
+----------
+
+- Implement schema synchronizer
+- Implement new 'expand', 'migrate' and 'contract' commands to
+  'nova-manage db'
+- Drop schema changes from existing migrations that are now done
+  automatically as part of the schema synchronizer
+
+
+Dependencies
+============
+
+This builds on top of the validate-migrations-and-model spec and extends
+the comparator to generate the DDL needed to change the running schema
+to match the model.
+
+This also depends on dropping the use of sqlalchemy-migrate for data
+migrations.
+
+
+Testing
+=======
+
+No tempest tests will be added since tempest does not do any upgrade
+testing.
+
+Grenade currently tests upgrades from older versions of Nova. A new
+test to use the new 'db expand', 'db migrate' and 'db contract' commands
+are necessary. This will be compared with the result of 'db sync' to
+ensure that upgrades from past commits end up semantically identical.
+
+turbo-hipster tests upgrades using production database snapshots. No
+changes are necessary since it currently uses 'nova-manage db sync' as
+well.
+
+
+Documentation Impact
+====================
+
+Documentation will need to be updated to include the new 'expand',
+'migrate' and 'contract' commands to 'nova-manage db'.
+
+Release Notes will need to be updated to warn that the model will need
+to be updated with local schema changes.
+
+Instance Types would need to be manually created as the 216 migration
+would not necessarily run anymore.
+
+
+References
+==========
+
+https://etherpad.openstack.org/p/kilo-nova-zero-downtime-upgrades
-- 
1.9.1

