From 78ab283422f6b7cb4f6b6cc47a34b452bfd114af Mon Sep 17 00:00:00 2001
From: Haruka Tanizawa <h-tanizawa@intellilink.co.jp>
Date: Thu, 12 Jun 2014 15:19:35 +0900
Subject: [PATCH] Add client token to CreateServer

With this blueprint, using client token, Nova can guarantee
idempotence of Nova POST request.

blueprint idempotentcy-client-token

Change-Id: I37904158131e7bd35e305050048f18a130ac2ecf
---
 specs/juno/idempotentcy-client-token.rst | 276 +++++++++++++++++++++++++++++++
 1 file changed, 276 insertions(+)
 create mode 100644 specs/juno/idempotentcy-client-token.rst

diff --git a/specs/juno/idempotentcy-client-token.rst b/specs/juno/idempotentcy-client-token.rst
new file mode 100644
index 0000000..1562f35
--- /dev/null
+++ b/specs/juno/idempotentcy-client-token.rst
@@ -0,0 +1,276 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+Idempotency for OpenStack API
+==========================================
+
+
+https://blueprints.launchpad.net/nova/+spec/idempotentcy-client-token
+
+When user failed to receive the API response from Nova, it is difficult to
+confirm whether the API request is successfully processed or not.  As a result,
+user may create unnecessary resources by unintentionally sending the same API
+request again and again (retry).
+In order to avoid such scenarios, this blueprint introduces the idempotency
+feature to OpenStack Nova API.
+Thereby, regardless of those unintended API requests made by user retries, user
+can obtain the same result as the initial API request and it prevents the
+creation of unnecessary resource.
+
+
+Problem description
+===================
+
+* Current API feature does not consider the request retry. (Current API
+  feature treats each request retry as a new request.)
+
+    As a brief description, POST requests like "CreateServer" do not contain
+    ID in its request URL.
+    However API response has "Resource ID" generated by Nova.
+    Therefore, if API response failed to receive for some reason, client who
+    has sent the API request does not have any method to know the resource id
+    or whether it is successfully created or not.
+    The user retries it by resending the same API request again and again.
+    In such case, unnecessary resources might be created without
+    the knowledge of the user.
+    Current situation, OpenStack does not have any method to recognize whether
+    the received API request is a result of user retry or totally new
+    API request.
+
+* End user use-case
+
+    Case 1.  Orchestration system execution like Heat
+
+    1.  While the client launches 3 multiple servers using templates,
+        and then the client process is suddenly down due to some reason before
+        it receives the API response from Nova.
+
+    2.  After a while, process started up.
+
+    3.  Now, the client process does not have any method to identify the
+        progress of Nova procedure and Heat side also cannot delete them.
+
+    4.  In this case, the client side interprets its error and retries
+        resource creation.
+
+    5.  As a result, some unnecessary virtual resources remain on Nova,
+        and Heat cannot manage those resources.
+
+    6.  Finally if retry resumed successfully, total 4 or more servers
+        have been created and one or more of them are unnecessary.
+
+    Case 2. Personal execution
+
+    On this case, assume that the end user is a cloud user
+    on commercialized service:
+
+    1.  User requests a server launch by API request, and Nova receives
+        launch request successfully.
+
+    2.  After then, some problem occurs like a network error.
+
+    3.  At this moment, the client could not receive the API response from
+        the Nova, but the launch request has been received successfully.
+
+    4.  When the user retires, Nova creates a new server for each API
+        request that sent by the retry.
+
+    5.  Finally, as a result of the user retry, 2 or more servers are
+        created and one or more of them are unnecessary.
+
+
+Proposed change
+===============
+
+The simplest solution is that client appends a uniquely identifiable "Mark" to
+the API request.
+Therefore, resource can be identified by the created API request.
+Meanwhile, current resource specification depends on API response.
+In other words, those API executions are identifiable and the client could
+trace the errors or check whether the API request has executed
+successfully or not.
+Similar feature has been implemented as "ClientToken" on Amazon EC2.
+
+ClientToken is a functionality that is able to append identifier called
+ClientToken to the API execution.
+If the client could not identify API execution result for some system trouble,
+then the client can use to call same API using same ClientToken.
+The Amazon EC2 cloud side will behave as:
+
+    * If a target API request has NOT been received, then the server executes
+      API and returns the result.
+
+    * If a target API request has been received, then the server skips
+      execution and returns the result.
+
+Therefore, appending of ClientToken makes the response same if the client
+calls duplicate requests(retries).
+Amazon EC2 calls this functionality "Ensuring Idempotency".
+It ensures that the instance creation is always unique when run instance is
+executed with ClientToken.
+
+Using the ClientToken functionality, the previous use case could be resolved:
+
+Resolve 1.
+    When orchestration system like Heat is down, caller side could
+    still keep ClientToken information.
+    It just needs re-request a server launch simply because Nova knows whether
+    launch an instance or skip the request.
+
+Resolve 2.
+    Just re-request a server launch when API response is unknown.
+    Nova recognizes duplicate request and will NOT create unnecessary servers.
+
+The solution using ClientToken provides that simple and safe retry
+method to OpenStack.
+
+* Description
+
+  Append an header tag like 'X-Client-Token: foo'
+
+  ClientToken specifications are required:
+
+  -  64 letters
+  -  ASCII encoding
+  -  Identify characters CAPITAL or not
+  -  ClientToken is unique for each tenant
+  -  Clients must create an unique ClientToken by themselves
+
+Alternatives
+------------
+
+* TaskAPI
+
+  https://blueprints.launchpad.net/nova/+spec/instance-tasks-api
+
+  At the first, I considered to implement this feature to TaskAPI.
+
+  TaskAPI is a feature that it gives id to request(equal to task), and
+  returns this id as response of request.
+  So user can check status of his request later.
+  I intended to implement tag field(user can set this tag value) to TaskAPI,
+  and treat this as this blueprint's ClientToken.
+
+  But to use TaskAPI, it is necessary to set instance_id as required parameter.
+  So, if user fails to get response from Nova, user can't use TaskAPI.
+  I thought that is not appropriate to implement idempotency feature
+  to TaskAPI.
+
+Data model impact
+-----------------
+
+This feature is implemented as decorator function.
+If you want to use idempotency, you may just simply set this decorator
+to any POST API you want to apply.
+
+* To implement this feature, following data is needed to save at least,
+    client_token/project_id/request_url/request_parameter
+
+REST API impact
+---------------
+
+This decorator can be used with v3 POST API.
+
+* For the first time of POST request, Nova returns 202 as result of
+  create server request.
+
+* For the second POST request, if you do same request with same ClientToken,
+  Nova also returns 202.
+
+* For the second POST request, if you do different request with same
+  ClientToken, Nova returns 409.
+  It means that 'The ClientToken is already used.'.
+
+Security impact
+---------------
+
+ClientToken is intended to be unique for each tenant.
+So it is possible that different users belonging to different tenants use
+the same ClientToken.
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+Even if client does not specify the request ClientToken or not, user don't
+take any effect from it.
+If you use python-novaclient, 'X-Client-Token' is needed to be implemented.
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+None
+
+Developer impact
+----------------
+None
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  haruka tanizawa(h-tanizawa)
+Other contributors:
+  None
+
+Work Items
+----------
+
+1. With below PoC, second request's response is equal to content of GET.
+   In the near term, I re-implement this as POST response.
+2. There needs to be more robust features decorator.
+3. I have implemented to idempotent.py this feature temporarily.
+   It is needed to be consider appropriate file and filepath.
+
+Here is the concrete PoC linkï¼š
+https://github.com/ntt-sic/nova/commit/c9bc157b122907d7bd7e98b364137b7ecd47bd0f
+
+
+Dependencies
+============
+One of Heat blueprint depends on this blueprint.
+* Support API retry function with Idempotency in creating/updating a stack
+
+  https://blueprints.launchpad.net/heat/+spec/support-retry-with-idempotency
+
+
+Testing
+=======
+
+In tempest, below tests will be needed.
+
+* Tests that to post requests several times with ClientToken.
+* Valiation tests of client_token/project_id/request_url/request_parameter .
+
+
+Documentation Impact
+====================
+
+There are some documentation impacts.
+
+First, new request header will be added.
+Second, every POST response would be same if request has same ClientToken.
+
+
+References
+==========
+
+Mailing list discussions
+
+- https://lists.launchpad.net/openstack/msg13082.html
+- http://lists.openstack.org/pipermail/openstack-dev/2013-October/017691.html
-- 
1.9.1

