From 8968daf3a106123c362293f2c55fda5008676d12 Mon Sep 17 00:00:00 2001
From: sajeeshcs <sajeesh.cs@cern.ch>
Date: Wed, 30 Jul 2014 13:17:09 +0000
Subject: [PATCH] Blueprint for the implementation of Nested Quota Driver API

Nested Quota Driver API helps in the the enforcement of
quota in Hierarchical Projects

Depends On: blueprint hierarchical-multitenancy

Change-Id: I219e335a9818ee6b39a4f21692128bc8497a11ae
---
 specs/juno/nested-quota-driver-api.rst | 266 +++++++++++++++++++++++++++++++++
 1 file changed, 266 insertions(+)
 create mode 100644 specs/juno/nested-quota-driver-api.rst

diff --git a/specs/juno/nested-quota-driver-api.rst b/specs/juno/nested-quota-driver-api.rst
new file mode 100644
index 0000000..84fea65
--- /dev/null
+++ b/specs/juno/nested-quota-driver-api.rst
@@ -0,0 +1,266 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+=======================
+nested-quota-driver-api
+=======================
+
+https://blueprints.launchpad.net/nova/+spec/nested-quota-driver-api
+
+Nested quota driver will enable OpenStack projects to enforce quota in nested
+projects. The nested projects are having a hierarchical structure, where each
+project may contain users and projects (can be called sub-projects), except for
+projects at the last level in the hierarchy called leaf nodes, which contain
+only users.
+
+Users can have different roles inside each project: A normal user can make use
+of resources of a project. A project admin is a user who in addition is allowed
+to create sub-projects, assign quota on resources to these sub-projects and
+assign the project admin role to individual users of the sub-projects.
+Resources quotas of the root project can only be set by the cloud admin.The
+users roles can be set as inherited, and if set, then an admin of a project is
+automatically an admin of all projects in the tree below.
+
+Problem description
+===================
+
+OpenStack is moving towards to support for hierarchical ownership of objects.
+In this regard, the Keystone will change the organizational structure of
+Openstack, creating nested projects in Keystone.
+
+The existing Quota Driver in Nova called "DbQuotaDriver" is useful to enforce
+quotas at both the project and the project-user level provided that all the
+projects are at the same level (i.e hierarchy level canot be greater than 1).
+
+The proposal is to develop a new Quota Driver called "NestedQuotaDriver", which
+will allow enforcing quotas in hierarchical multitenancy of Openstack.
+
+Use Case:
+
+**Actors**
+* Martha - Admin (i.e role:cloud-admin) of ProductionIT
+
+* Joe - Manager (i.e role: project-admin) of Project CMS
+
+* Sam - Manager (i.e role: project-admin) of Project ATLAS
+
+* Bill : is one important CMS user and needs access to the bulk of computing
+         resources of CMS for a physics analysis
+
+Martha is an infrastructure provider and offers cloud services to Joe for
+Project CMS, and Sam for Project ATLAS. Martha needs to be able to set the
+quotas for both CMS and ATLAS, and manage quotas across the entire system.
+Joe has multiple sub-projects with many users under CMS. Joe needs the ability
+to create quotas, as well as the ability to list and delete resources across
+CMS. Sam and Joe cannot see or manipulate the resources owned by each other,
+only Martha has the ability to manage the whole cloud. Joe can approve the
+request of Bill for an increase of quota for his activity, and changes the
+quota of the Bills projects without having to involve the cloud admin.
+
+
+Proposed change
+===============
+
+1. The default quota (hard limit) for any newly created project is set to 0.
+The neutral value of zero ensures consistency of data in the case of race
+conditions when several project are created by admins  at the same time.
+
+2. A project is allowed to create a server(VM) only after setting the quota is
+set to a non-zero value (as default value is 0). After the creation of a new
+project Quota values must be set explicitly by a Nova API call to a value which
+ensures availability of free quota before resources can be claimed in the
+project.
+
+3. A user with role "cloud-admin" is permitted to do quota operations
+across the entire hierarchy, including the top level project. Cloud-Admins are
+the only users who are allowed to set the quota of the root project in a tree,
+and assign the Project-admin role to users in the root project.
+
+4. A person with role "project-admin" in a project is permitted to do quota
+operations on its siblings (sub-projects and users) in the hierarchy. If the
+role "projet-admin" on a project is set as inheritable in Keystone, then the
+user with this role is permitted to do quota operations starting from that
+project to the last level project/user under the project hierarchy.
+
+5. The total resources consumed by a project is dividied into
+     a.Used Quota  - Resources used by the project users
+                     (excluding child-projects)
+
+     b.Reserved Quota - Resources reserved for future use by the project
+
+     c.Allocated Quota - Sum of the quota "hard_limit" value of immediate child
+                         projects
+
+6. The "free" quota availabile with a project is calculated as
+         free quota = hard_limit - (used + reserved + allocated)
+
+   Free quota is not stored in database; it is calculated for each project
+   on the fly.
+
+7. An increase in the quota value of a project is allowed only if its parent
+   has sufficient free quota available. If there is free quota available at
+   the parent, then the quota update operation will result in update of the
+   "hard_limit" value of the project and "allocated" value update of parent
+   project. That's why, it should be noted that updating the quota of a project
+   requires the token to be scoped at the parent level.
+
+    * Hierarchy of Projects is as A->B->C
+      Project A (hard_limit = 100, used = 0, reserved = 0, allocated = 50)
+      Project B (hard_limit = 50, used = 20, reserved = 0, allocated = 10)
+      Project C (hard_limit = 10, used = 10, reserved = 0, allocated = 0)
+
+      Free quota for projects would be:
+
+      A:Free Quota = 100 {A:hard_limit} - ( 0 {A:used} + 0 {A:reserved} +
+                          50 {A:Allocated to B})
+
+      A:Free Quota = 50
+
+      B:Free Quota = 50  {B:hard_limit} - ( 20 {B:used} + 0 {B:reserved} +
+                          10 {B:Allocated to C})
+
+      B:Free Quota = 20
+
+      C:Free Quota = 10  {C:hard_limit} - ( 10 {C:used} + 0 {C:reserved} +
+                          0 {C:Allocated})
+
+      C:Free Quota = 0
+
+      If Project C hard_limit is increased by 10, then this change results in:
+      Project A (hard_limit = 100, used = 0, reserved = 0, allocated = 50)
+      Project B (hard_limit = 50, used = 20, reserved = 0, allocated = 20)
+      Project C (hard_limit = 20, used = 10, reserved = 0, allocated = 0)
+
+      If Project C hard_limit needs to be increased further by 20, then this
+      operation will be aborted, because the free quota available with its
+      parent i.e Project B is only 10. So, first project-admin of A should
+      increase the "hard_limit" of Project B (using scoped token to Project A,
+      because of action at level A) and then increase the "hard_limit" of
+      Project C (again scoped token to Project B)
+
+8.A decrease in the quota value of a project is allowed only if it has free
+  quota available
+     free quota > 0 (zero)
+
+  And hence the maximum decrese in quota value is limited to free quota value.
+
+  * Hierarchy of Projects is A->B->C,where A is the root project
+      Project A (hard_limit = 100, used = 0, reserved = 0, allocated = 50)
+      Project B (hard_limit = 50, used = 20, reserved = 0, allocated = 10)
+      Project C (hard_limit = 10, used = 10, reserved = 0, allocated = 0)
+
+      If Project B hard_limit is reduced by 10, then this change results in
+      Project A (hard_limit = 100, used = 0, reserved = 0, allocated = 40)
+      Project B (hard_limit = 40, used = 20, reserved = 0, allocated = 10)
+      Project C (hard_limit = 10, used = 10, reserved = 0, allocated = 0)
+
+      If Project B's hard_limit needs to be reduced further by 20, then this
+      operation will be aborted, because the free quota of Project B should
+      be greater than or equal to (20+0+10)
+
+Alternatives
+------------
+
+None
+
+Data model impact
+-----------------
+
+Create a new column "allocated" in table "quota_usages" with default value 0.
+
+REST API impact
+---------------
+
+None
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  * sajeesh
+
+Other contributors:
+  * vishy
+  * schwicke
+  * raildo
+  * vinod
+  * nirbhay
+  * morganfainberg
+  * tellesnobrega
+  * rodrigodsousa
+  * afaranha
+
+Work Items
+----------
+
+1. Two new roles will be used "cloud-admin" and "project-admin". Users with
+   role "cloud-admin" will be able to do quota operations on any project/user
+   in the hierarchy. The user with "project-admin" role on a project will be
+   able to do quota operations on the  child projects which he created.
+
+2. A new Quota Driver called "NestedQuotaDriver" will be implemented to enforce
+   quotas in hierarchical multitenancy of OpenStack.
+
+
+Dependencies
+============
+
+Depends on bp Hierarchical Multitenancy
+  * https://blueprints.launchpad.net/keystone/+spec/hierarchical-multitenancy
+
+
+Testing
+=======
+
+* Add unit tests for the REST APIs calls.
+
+* Add unit tests for integration with other services.
+
+
+Documentation Impact
+====================
+
+None
+
+
+References
+==========
+
+* Wiki <https://wiki.openstack.org/wiki/HierarchicalMultitenancy>
-- 
1.9.1

