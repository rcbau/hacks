From 110c50a8625de553ad782054b9d9bac44696a5fd Mon Sep 17 00:00:00 2001
From: Sean Dague <sean@dague.net>
Date: Fri, 20 Jun 2014 16:20:00 -0400
Subject: [PATCH] Alternative take on API microversioning

This is a different take on API microversioning that tries to be
a bit stricter on the design approach. It's done as an -alt in
a second patch so that it can be easily seen at the same time, and
debated independently.

It is far from complete, but seemed more useful to propose this
way versus through gerrit comments.

Change-Id: I72cd4cfdbca6ac499468be82d48b5e9857936bb4
---
 specs/juno/api-microversions-alt.rst | 328 +++++++++++++++++++++++++++++++++++
 1 file changed, 328 insertions(+)
 create mode 100644 specs/juno/api-microversions-alt.rst

diff --git a/specs/juno/api-microversions-alt.rst b/specs/juno/api-microversions-alt.rst
new file mode 100644
index 0000000..5a68ef0
--- /dev/null
+++ b/specs/juno/api-microversions-alt.rst
@@ -0,0 +1,328 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================
+API Microversions (Alternate Proposal)
+==========================================
+
+Include the URL of your launchpad blueprint:
+
+https://blueprints.launchpad.net/nova/+spec/api-microversions
+
+(This is in no way a complete spec covering this space, but it's
+trying to narrow in on a few things.)
+
+Problem description
+===================
+
+As a community we are really good at evolving interfaces and code over
+time via incremental development. We've been less good at giant big
+bang drops of code. The Nova API has become sufficiently large, and
+constantly growing through new extensions, that it's not likely to be
+able to ever do a new major version of the API.
+
+At the same time the escape hatch that we've provided for allowing
+innovation in the API, through adding extensions, has grown to the
+point where we now have extensions to extensions, under the assumption
+that the extension list is a poor man's versioning mechanism. While
+true, this has let to pain and debt, and prevents us from making
+certain changes, like deprecating pieces of the API that are currently
+non sensible (or flat out broken).
+
+We must come up with a better way that serves the following needs:
+
+- Makes it possible to evolve the API in an incremental manner, which
+  is our strength as a community
+- Provides backwards compatability for consumers
+- Provides cleanliness in the code to make it less likely that we'll
+  do the wrong thing and break the world.
+
+A great interface is one that goes out of it's way to make it hard to
+use incorrectly. A good interface tries to be a great interface, but
+bends to the realties of the moment.
+
+
+Proposed change
+===============
+
+We have 3 main concerns:
+
+- How will the end users use this, and how to we make it hard to use
+  wrong
+- How will the code be internally structured, and how do we make it
+  easy to see in code that you are about to break the world (not just
+  from testing, but from code structure).
+- How will we test this in integration. And what limits does that
+  impose.
+
+
+Type of versioning
+------------------
+
+The base proposal provides options, and a hybrid approach. I believe
+this is too complicated and confusing to get right. In complexity lie
+dragons, also giant sloths, equally dangerous, but slower to emerge.
+
+(For the purposes of the following discussion "the API" is all core
+and optional extensions in the upstream Nova tree.)
+
+Versioning of the API should be 1 monotonic counter. It should be in
+the form X.Y.Z though X.Y is acceptable, and assumes Z is 0. Z is
+reserved for critical bug fixes on stable branches.
+
+A version response would look as follows
+
+::
+
+    GET /
+    {
+         "versions": [
+            {
+                "id": "v2.0",
+                "links": [
+                      {
+                        "href": "http://localhost:8774/v2/",
+                        "rel": "self"
+                    }
+                ],
+                "status": "CURRENT",
+                "updated": "2011-01-21T11:33:21Z"
+                "version": "2.115"
+                "min_version": "2.0"
+            },
+       ]
+    }
+
+This specifies the min and max version that the server can
+understand. min_version will start at 2.0 representing the current 2.0
+API. It may eventually be uplifted if there are support burdens we
+don't feel are addequate to support. For instance if version 2.001 was
+the drop of the XML API, at some point in the future 2.001 would be
+the minimum version provided.
+
+Client Interaction
+------------------
+
+A client specifies the version of the API they want via the following
+approach, a new header::
+
+  X-OS-Compute-Version: 2.114, experimental, vnd:rax
+
+This conceptually acts like the accept header, with some nuance.  We
+introduce 3 concepts here, global API version, experimental flag, and
+vendor flags.
+
+Semantically:
+
+- if X-OS-Compute-Version is not provided, act as if min_version was
+  sent.
+- if X-OS-Compute-Version is sent, respond with the API at that
+  version. If that's outside of the range of versions supported,
+  return 406 (or some other future determined appropriate error).
+- if X-OS-Compute-Version: latest (special keyword) return Max
+  Version response.
+- if experimental is sent, return results with *all* experimental
+  extensions enabled.
+- if vnd:VENDORNAMESPACE is sent, return results that include that out
+  of tree vendor extensions.
+
+This means out of the box, with an old client, an OpenStack
+installation will return vanilla OpenStack responses at v2. The user
+or SDK will have to ask for something different.
+
+Experimental and vendor, by being virtue of out of tree, do not
+benefit from versioning. It's an all or nothing affair. There are less
+unique snowflakes in the world than people think, and we actually want
+these things back in tree.
+
+Nova Tree
+---------
+
+In the nova tree a decorator would be introduced to label routing
+functions version specification
+
+::
+
+   servers.py:
+
+   @api.version(introduced="2.0", deprecated="2.115", removed="2.300")
+   def index(...):
+       ....
+
+   @api.version(introduced="2.300")
+   def index_2(...)
+       """A bigger badder index listing"""
+       ....
+
+
+@api.version also supports experimental=True/False (default
+False). And vnd="". It's a fatal error to combine either of those
+flags with the version flag.
+
+This will provide an in tree way of signaling when new methods come
+into play, as well as a selection for routing requests to different
+paths based on versions allowed.
+
+(Note: yes this is a *ton* of new work, but for long term tree sanity
+I think we need it).
+
+Alternatives
+------------
+
+See non-alt proposal
+
+
+Data model impact
+-----------------
+
+None
+
+REST API impact
+---------------
+
+Additional version information added to GET / even in the base case,
+it should be minimally disruptive.
+
+Otherwise the whole proposal is basically REST impact
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+SDK authors will need to start using the X-OS-Compute-Version header
+to get access to new features. The fact that new features will only be
+added in new versions will encourage them to do so.
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+
+Discuss things that will affect how you deploy and configure OpenStack
+that have not already been mentioned, such as:
+
+* What config options are being added? Should they be more generic than
+  proposed (for example a flag that other hypervisor drivers might want to
+  implement as well)? Are the default values ones which will work well in
+  real deployments?
+
+* Is this a change that takes immediate effect after its merged, or is it
+  something that has to be explicitly enabled?
+
+* If this change is a new binary, how would it be deployed?
+
+* Please state anything that those doing continuous deployment, or those
+  upgrading from the previous release, need to be aware of. Also describe
+  any plans to deprecate configuration values or features.  For example, if we
+  change the directory name that instances are stored in, how do we handle
+  instance directories created before the change landed?  Do we move them?  Do
+  we have a special case in the code? Do we assume that the operator will
+  recreate all the instances in their cloud?
+
+Developer impact
+----------------
+
+Discuss things that will affect other developers working on OpenStack,
+such as:
+
+* If the blueprint proposes a change to the driver API, discussion of how
+  other hypervisors would implement the feature is required.
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Who is leading the writing of the code? Or is this a blueprint where you're
+throwing it out there to see who picks it up?
+
+If more than one person is working on the implementation, please designate the
+primary author and contact.
+
+Primary assignee:
+  cyeoh-0
+
+Other contributors:
+  <launchpad-id or None>
+
+Work Items
+----------
+
+Work items or tasks -- break the feature up into the things that need to be
+done to implement it. Those parts might end up being done by different people,
+but we're mostly trying to understand the timeline for implementation.
+
+
+Dependencies
+============
+
+* Include specific references to specs and/or blueprints in nova, or in other
+  projects, that this one either depends on or is related to.
+
+* If this requires functionality of another project that is not currently used
+  by Nova (such as the glance v2 API when we previously only required v1),
+  document that fact.
+
+* Does this feature require any new library dependencies or code otherwise not
+  included in OpenStack? Or does it depend on a specific version of library?
+
+
+Testing
+=======
+
+Historically API stability in Nova was really only maintained because
+Tempest covered such a large portion of the API. That will not be
+realistic for all versions possible here.
+
+Nova unit tests will need to be enhanced to do most of the heavy
+lifting.
+
+When new tests are added to Tempest, they will specify the minimum
+version they function on (we are already starting down that path for
+novaclient testing).
+
+Tempest will run Nova tests twice during a run. At min_version
+(escentially specifying no OS-Compute-Version), and at at version
+detected by the setup tool (currently devstack) for the max version
+Nova supports in the branch in question.
+
+Scenario tests will occur at max version.
+
+Documentation Impact
+====================
+
+What is the impact on the docs team of this change? Some changes might require
+donating resources to the docs team to have the documentation updated. Don't
+repeat details discussed above, but please reference them here.
+
+
+References
+==========
+
+Please add any useful references here. You are not required to have any
+reference. Moreover, this specification should still make sense when your
+references are unavailable. Examples of what you could include are:
+
+* Links to mailing list or IRC discussions
+
+* Design summit session https://etherpad.openstack.org/p/juno-nova-v3-api
+
+* Recent discussions:
+  https://wiki.openstack.org/wiki/Nova/ProposalForAPIMicroVersions
-- 
1.9.1

