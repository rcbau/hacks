From 37eaf0e20f3e192ee79929206c8795c8230c4b6d Mon Sep 17 00:00:00 2001
From: Aneesh Puliyedath Udumbath <aneesh.udumbath@RACKSPACE.COM>
Date: Mon, 7 Apr 2014 19:52:05 +0530
Subject: [PATCH] API: Metadata Service Callbacks

In this blueprint we aim to add an additional API to allow guest instances to
set (but not overwrite) server metadata. The API could be used for implementing
functionalities like 'reset network' without depending on nova-agent.

Change-Id: I94e2910b891f2feb723ebfe62181ec3e51499275
---
 specs/juno/metadata-service-callbacks.rst | 219 ++++++++++++++++++++++++++++++
 1 file changed, 219 insertions(+)
 create mode 100644 specs/juno/metadata-service-callbacks.rst

diff --git a/specs/juno/metadata-service-callbacks.rst b/specs/juno/metadata-service-callbacks.rst
new file mode 100644
index 0000000..0ae1cb8
--- /dev/null
+++ b/specs/juno/metadata-service-callbacks.rst
@@ -0,0 +1,219 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+===============================
+API: Metadata Service Callbacks
+===============================
+
+https://blueprints.launchpad.net/nova/+spec/metadata-service-callbacks
+In this blueprint we aim to extend the metadata service API to allow guest
+instances to set (but not overwrite) server metadata. An example use of this
+would be for cloud-init to report to the outside world that server-setup has
+been completed.
+
+Problem description
+===================
+
+Currently in-guest services cannot communicate externally without depending on
+hypervisor specific implementations. Cloud-init has a mechanism for
+communicating encrypted passwords externally using its own metadata API. The
+encrypted password is stored in instance_system_metadata. An API to set server
+metadata will allow a similar channel of communication for in-guest agents
+but in a more generic fashion.
+
+Use case 1:
+* add a script in cloud-init to report back to the metadata service when
+cloud-init has completed.
+* user can poll server metadata to see when their server setup is complete.
+* In the case of a rebuild all the keys within the namespace will be dropped in
+order to enable cloud-init to report completion when the server comes back up
+again.
+
+Proposed change
+===============
+
+Add an API to allow guest instances to set server metadata.
+We already allow posts to set-password, this extends it to a more general
+mechanism.
+
+To ensure it is safe and not for high amounts of traffic:
+* add a namespace to all keys from\_server\_
+* only set metadata keys that are not already set
+i.e. it is a single write only API
+* only set metadata if it is within the quota of the user.
+
+Alternatives
+------------
+
+We could give access to the nova-api directly, and give the server some kind
+of token that allows it to set metadata for just its own server. However, with
+private networking, servers don't always have access to the nova-api, but do
+always have access to the metadata service.
+
+We could store the metadata without a namespace, and allow it to overwrite
+existing metadata, but this seemed to encourage using the metadata service as
+a high bandwidth interface (which would be a bad idea), and increases the
+attach surface if the wrong person can post to the metadata service.
+
+Users could use something outside of Nova
+
+We could add new APIs for each kind of new interaction like "setup-complete"
+and "client-agent-response", etc.
+
+Data model impact
+-----------------
+
+None
+
+REST API impact
+---------------
+
+API for updating metadata
+
+POST: http://169.254.169.254/openstack/2014-10-17/meta_data
+
+Normal http response code for a request containing only new keys: 200
+Normal http response code for a request containing new and existing keys:400
+Response code for a request containing only existing keys:400
+Response code if operation exceeds quota: 413
+
+Request parameters:
+* meta: a json dictionary of the new metadata keys and values
+
+JSON Request::
+
+    {
+        "meta": {
+             "key_1": "value1",
+             "key_2": "value2",
+        }
+    }
+
+JSON Response::
+
+    {
+        "availability_zone": "nova",
+        "hostname": "test.novalocal",
+        "launch_index": 0,
+        "meta": {
+            priority": "low",
+            "role": "webserver",
+            "from_server_key_1": "value1",
+            "from_server_key_2": "value2",
+        },
+        "name": "test",
+        "public_keys": {
+            "mykey": "ssh-rsa AAAAB3NzaC1yc2EAAMdEX8Q== Generated by Nova\n"
+       },
+       "uuid": "d8e02d56-2648-49a3-bf97-6be8f1204f38"
+    }
+
+Security impact
+---------------
+Although this opens up a write channel to the metadata service, there should
+be no security impact because
+
+* Rate limiting will continue to be applied to all the requests to the metadata
+  service just as it is today
+* Quotas for the number of keys will be enforced just as it is done today.
+* Restrictions on the size of the keys and values will be enforced just as it
+  is done today.
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+    aneesh-udumbath
+
+
+Other contributors:
+    aditirav
+
+
+Work Items
+----------
+
+* Add a route for /meta_data under http://169.254.169.254/openstack/latest
+* Add a module under nova/api/metadata to handle POST requests to the above
+  URL
+
+Dependencies
+============
+
+None
+
+Testing
+=======
+
+Tempest tests need to be written to check that keys are updated in metadata
+service.
+
+Documentation Impact
+====================
+
+Metadata service documentation needs to be updated to include the extension to
+the metadata API.
+
+JSON Request::
+
+    {
+        "meta": {
+             "key_1": "value1",
+             "key_2": "value2",
+        }
+    }
+
+JSON Response::
+
+    {
+        "availability_zone": "nova",
+        "hostname": "test.novalocal",
+        "launch_index": 0,
+        "meta": {
+            priority": "low",
+            "role": "webserver",
+            "from_server_key_1": "value1",
+            "from_server_key_2": "value2",
+        },
+        "name": "test",
+        "public_keys": {
+            "mykey": "ssh-rsa AAAAB3NzaC1yc2EAAMdEX8Q== Generated by Nova\n"
+       },
+
+References
+==========
+
+https://etherpad.openstack.org/IcehouseNovaMetadataService
-- 
1.9.1

