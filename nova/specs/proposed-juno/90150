From c6a9480ad548ac41461d50d36cb232f67854149f Mon Sep 17 00:00:00 2001
From: Carl Baldwin <carl.baldwin@hp.com>
Date: Wed, 16 Apr 2014 12:09:57 -0600
Subject: [PATCH] Integrate DNS resolution with Neutron using Nova hostname

bp internal-dns-resolution

Change-Id: Ic42aae2cbdf1fa3f6e6fa4227484cdba525884ef
---
 specs/juno/internal-dns-resolution.rst | 297 +++++++++++++++++++++++++++++++++
 1 file changed, 297 insertions(+)
 create mode 100644 specs/juno/internal-dns-resolution.rst

diff --git a/specs/juno/internal-dns-resolution.rst b/specs/juno/internal-dns-resolution.rst
new file mode 100644
index 0000000..517b38b
--- /dev/null
+++ b/specs/juno/internal-dns-resolution.rst
@@ -0,0 +1,297 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+===============================
+Neutron DNS Using Nova Hostname
+===============================
+
+:Author: Carl Baldwin <carl.baldwin@hp.com>
+:Copyright: 2014 Hewlett-Packard Development Company, L.P.
+
+https://blueprints.launchpad.net/nova/+spec/neutron-hostname-dns
+
+Users of an OpenStack cloud would like to look up their instances by name in an
+intuitive way using the Domain Name System (DNS).  They boot an instance using
+Nova and they give that instance an "Instance Name" as it is called in the
+Horizon interface.  That name is used as the hostname from the perspective of
+the operating system running in the instance.  It is reasonable to expect some
+integration of this name with DNS.
+
+Problem description
+===================
+
+Neutron already enables DNS lookup for instances using an internal dnsmasq
+instance.  It generates a generic hostname based on the private IP address
+assigned to the system.  For example, if the instance is booted with
+*10.224.36.4* then the hostname generated is *10-224-36-4.openstacklocal.*
+
+The first problem with this implementation is that the name used in DNS does
+not match what the instance knows as its host name.  This creates problems with
+sudo and other software that expect to be able to look up its own hostname
+using DNS [#]_.
+
+.. [#] https://bugs.launchpad.net/nova/+bug/1175211
+
+The second problem with this implementation is that the end user does not know
+this name without some special knowledge.  The generated name is not presented
+anywhere in the API and therefore cannot be presented in any UI either.
+
+Proposed change
+===============
+
+This blueprint will reconcile the DNS name between Nova and Neutron.  Nova will
+pass the *hostname* to the Neutron API as part of any port create or update
+using a new *hostname* field in the Neutron API.  Neutron DHCP offers will use
+the instance name as hostname.  Neutron DNS will reply to queries for the new
+hostname.
+
+To handle existing installations, Neutron will fall back completely to the
+current behavior in the event that a hostname is not supplied on the port.
+
+Nova will pass its sanitized hostname when it boots using an existing Neutron
+port by updating the port with the hostname field.  An implementation has
+already been started [#]_.  This implementation will need to be augmented in
+two ways:
+
+.. [#] https://review.openstack.org/#/c/36133/
+
+#. Nova will pass the VM name using a new *hostname* field in the port rather
+   than the *name* field on create or update.
+#. Nova will recognize an error from the Neutron API server and retry without
+   *hostname* if it is received.  This error will be returned if Neutron has
+   not been upgraded to handle the hostname field.  This check will be
+   well-documented in the code as a short-term issue and will be deprecated in
+   a following release.  Adding this check will save deployers from having to
+   coordinate deployment of Nova and Neutron.
+#. Neutron will validate the hostname passed to it for dns label validitity and
+   also for uniqueness with the scope of the configured domain name.  If it
+   fails then the port create will fail and the instance boot will fail.
+   Neutron will *only* begin to fail port creations *after* it has been
+   upgraded with the corresponding changes *and* the user has enabled DNS
+   resolution on the network by associating a domain name other than the
+   default openstack.local.  This will avoid breaking existing work-flows that
+   might use unacceptable DNS names.
+
+.. NOTE:: If the user updates the hostname on the Neutron port after the VM has
+   already booted then there will be an inconsistency between the hostname in
+   DNS and the instance hostname.  This blueprint will not do any special
+   handling of this case.  The user should not be managing the hostname through
+   both Nova and Neutron.  I don't see this as a big concern for user
+   experience.
+
+Following is a description of scenarios where the Nova *hostname* may fail
+validation when passed to Neutron.
+
+Host names may not be Valid DNS Names.
+
+    Violations of this type will be rare.
+
+    Nova sanitizes the hostname to conform to rules for hostnames [#]_ [#]_.
+    These rules are close to the rules for DNS labels [#]_.  The main
+    differences are that Nova allows a hostname to begin with a digit and
+    exceed 63 characters.
+
+    In the event that Nova passes an illegal DNS label in creating the port,
+    Neutron API will return an error that should fail the VM create.
+
+.. [#] https://tools.ietf.org/html/rfc952
+.. [#] https://tools.ietf.org/html/rfc1123
+.. [#] http://tools.ietf.org/html/rfc1035
+
+Nova Allows Duplicate Names.
+
+    The Nova API does not enforce that host names are unique.  Adding this
+    enforcement has similar complications to adding validation discussed in the
+    previous section.
+
+    Additionally, Neutron will enforce that hostnames are unique using a case
+    insensitive comparison [#]_.  The Neutron companion to this blueprint
+    discusses this constraint in more detail.
+
+    Neutron will enforce this in port create and port update APIs using a
+    *first-come-first-served* policy.  The database will have a unique
+    constraint on this new name.  If that constraint is violated then Neutron
+    will return an error that should fail the VM create.
+
+.. [#] http://tools.ietf.org/html/rfc4343
+
+Nova Allows Fully Qualified Names
+
+    A FQDN can be passed in as the VM name.  In this case, the Nova sanitized
+    version is still a fully qualified name.  For example, if I pass
+    "vm.example.com" or "vm.example.com." as the name of the VM, the hostname
+    will be set to "vm.example.com".
+
+    In this case, Nova will pass the entire hostname to Neutron.  Neutron may
+    be able to make use of the full name.  More about this is discussed in the
+    Neutron blueprint.  It is sufficient to say that Nova should not worry
+    about truncating this or doing further validation.  If Neutron does return
+    an error then the VM create should fail like with the other errors.
+
+Alternatives
+------------
+
+Move Validation to Nova
+~~~~~~~~~~~~~~~~~~~~~~~
+
+It might be reasonable to modify Nova's hostname sanitization so that it
+produces a valid DNS label.  The problem with doing this would be potential
+disruption to existing workflows.  The differences might be subtle enough that
+this is not a concern.  Nova would not allow hostnames starting with a digit or
+exceeding 63 characters in length.  It would also normalize to lower-case.
+
+Duplicate name detection could be attempted in Nova.  This is a bigger issue.
+I've seen duplicate names in the wild.  Nova likely does not have the
+information necessary to check for duplicate names within the appropriate
+scope.  For example, I would like to check duplicate names per domain across
+networks, this will be difficult for Nova.
+
+Move Port Creation Earlier
+~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+It may be better if Nova could attempt port creation with Neutron before the
+API operation completes so that the API operation will fail if the port
+creation fails.  In the current design, the Nova API call will succeed and the
+port creation failure will cause the instance to go to an error state.  I
+believe the thing preventing this is the use case where a bare-metal instance
+is being booted.  In that use case, Nova must wait until the instance has been
+scheduled before it can get the mac address of the interface to give to port
+creation.
+
+This change will make for a better user experience in the long run.  However,
+this work is out of the scope of this blueprint and can be done as follow up
+work independently.  One possibility that should be explored is to allow
+updating the Neutron port with the mac address when it is known.
+
+Send Neutron DNS name back to Nova
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+I briefly considered a design where instead of returning an error to Nova,
+Neutron would accept whatever Nova passed as the hostname.  If it failed
+validation then Neutron would fall back to its old behavior and generate a DNS
+name based on the IP address.  This IP address would've been fed back to Nova
+through the existing port status notifications that Neutron already sends back
+to Nova.  It would then be written in to the Nova database so that it can be
+shown to the user.
+
+Feedback from the community told me that this would create a poor use
+experience because the system would be making a decision to ignore user input
+without a good mechanism for communicating that back to the user.
+
+Data model impact
+-----------------
+
+None
+
+REST API impact
+---------------
+
+None.
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+This will provide a better user experience overall.  With the hostname being
+fed to Neutron, it will be available in the DNS in Neutron and optionally -- in
+the future -- in DNSaaS externally.  This improves the integration of these
+services from the user's point of view.
+
+Performance Impact
+------------------
+
+If the Nova upgrade is deployed before the corresponding Neutron upgrade then
+there will be a period of time where Nova will make two calls in to Neutron for
+every port create.  The first call will fail and then Nova will make a second
+call without the *hostname* field which will be expected to pass like before.
+
+Other deployer impact
+---------------------
+
+This change was carefully designed to allow new Nova and Neutron code to be
+deployed independently.  The new feature will be available when both upgrades
+are complete.
+
+DNS names will only be passed for new instances after this feature is enabled.
+Nova will begin passing hostname to Neutron after an upgrade only for new
+instances.
+
+If Neutron is upgraded before Nova, there is no problem because the hostname
+field is not required and behavior defaults to old behavior.
+
+If Nova is upgraded before Neutron then Nova will see errors from the
+Neutron API when it tries passing the hostname field.  Once again, Nova
+should recognize this error and retry the operation without the hostname.
+
+The deployer should be aware of the `Performance Impact`_ discussed.
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  `carl-baldwin <https://launchpad.net/~carl-baldwin>`_
+
+Other contributors:
+  `zack-feldstein <https://launchpad.net/~zack-feldstein>`_
+
+Work Items
+----------
+
+#. Modify existing proposal to pass hostname to use *hostname* field rather
+   than *host*.
+#. Handle expected errors by retrying without hostname set.
+#. Extra credit:  Move port creation up so that the API fails with a bad DNS
+   name.
+
+Dependencies
+============
+
+In order to for this to work end to end, we need coordinated change in Neutron.
+
+https://blueprints.launchpad.net/neutron/+spec/internal-dns-resolution
+
+
+Testing
+=======
+
+Tempest tests should be added or modified for the following use cases
+
+- An instance created using the nova API can be looked up using the instance
+  name.
+
+Documentation Impact
+====================
+
+Mention in the documentation that instance names will be used for DNS.  Be
+clear that it will be the Nova *hostname* that will be used.  Also, detail the
+scenarios where instance creation will fail.
+
+#. It will only fail when DNS has been enabled for the Neutron network by
+   associating a domain other than openstack.local.
+#. An invalid DNS label was given.
+#. Duplicate names were found on the same domain.
+
+References
+==========
+
+None
-- 
1.9.1

