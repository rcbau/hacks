From 7326fb153e322b863c04ed1e200ad492fb3aa0a0 Mon Sep 17 00:00:00 2001
From: Dane Fichter <dane.fichter@jhuapl.edu>
Date: Wed, 9 Sep 2015 14:18:56 -0400
Subject: [PATCH] Nova Support of Glance Image Signing

This spec is related to work in the Glance project which handles
signed images.

SecurityImpact
DocImpact

It depends on this glance spec:
Depends-On: I305b2ae86415c8d256c641abb2795af663bee56a
Change-Id: Ia8e7fcc21d7c15e480facbe30af88cdce2d73159
Implements: blueprint nova-support-image-signing
---
 specs/mitaka/approved/image-verification.rst | 354 +++++++++++++++++++++++++++
 1 file changed, 354 insertions(+)
 create mode 100644 specs/mitaka/approved/image-verification.rst

diff --git a/specs/mitaka/approved/image-verification.rst b/specs/mitaka/approved/image-verification.rst
new file mode 100644
index 0000000..4ca2a26
--- /dev/null
+++ b/specs/mitaka/approved/image-verification.rst
@@ -0,0 +1,354 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+===========================
+Nova Signature Verification
+===========================
+
+https://blueprints.launchpad.net/nova/+spec/nova-support-image-signing
+
+OpenStack currently does not support signature validation of uploaded signed
+images. Equipping Nova with the ability to validate image signatures will
+provide end users with stronger assurances of the integrity of the image data
+they are using to create servers. This change will use the same data model for
+image metadata as the accompanying functionality in Glance, which allows the
+end user to sign images and verify these image signatures upon upload [1].
+
+
+Problem description
+===================
+
+Currently, OpenStack's protection against unexpected modification of images is
+limited to verifying an MD5 checksum. While this may be sufficient for
+protecting against accidental modifications, MD5 is a hash function, not an
+authentication primitive [2], and thus provides no protection against
+deliberate, malicious modification of images. An image could potentially be
+modified in transit, such as when it is uploaded to Glance or transferred to
+Nova. An image that is modified could include malicious code. Providing
+support for signature verification would allow Nova to verify the signature
+before booting and alert the user of successful signature verification via a
+future API change. This feature will secure OpenStack against the following
+attack scenarios:
+
+* Man-in-the-Middle Attack - An adversary with access to the network between
+  Nova and Glance is altering image data as Nova downloads the data from
+  Glance. The adversary is potentially incorporating malware into the image
+  and/or altering the image metadata.
+
+* Malicious Admin - An Openstack admin with privileged access to Glance is
+  incorporating malware into the image files stored in Glance. This admin is
+  also potentially adding maliciously generated certificates to the key
+  manager and using these certificates to re-sign the corrupted images.
+
+* Untrusted Glance - In a hybrid cloud deployment, Glance is hosted on
+  machines which are located in a physically insecure location or is hosted by
+  a company with limited security infrastructure. Adversaries may be able to
+  compromise the integrity of Glance and/or the integrity of images stored by
+  Glance through physical access to the host machines or through poor network
+  security on the part of the company hosting Glance.
+
+Please note that our threat model considers only threats to the integrity and
+confidentiality of images, while they are in transit between the end user and
+Glance, while they are at rest in Glance and while they are in transit between
+Glance and Nova. This threat model does not include, and this feature
+therefore does not address, threats to the integrity, availability, or
+confidentiality of Nova.
+
+Use Cases
+---------
+
+* A user wants a high degree of assurance that a customized image
+  which they have uploaded to Glance has not been accidentally or
+  maliciously modified prior to booting the image.
+
+With this proposed change, Nova will verify the signature of a signed image
+while downloading that image. If the image signature cannot be verified, then
+Nova will not boot the image and instead place the instance into an error
+state.
+
+The user will begin to use this feature by uploading the image and the image
+signature metadata to Glance via the Glance API's image-create method. The
+required image signature metadata properties are as follows:
+
+* signature - A string representation of the base 64 encoding of the signature
+  of the image's MD5 checksum.
+
+* signature_hash_method - A string designating the hash method used for
+  signing. Currently, the supported values are 'SHA-224', 'SHA-256', 'SHA-384'
+  and 'SHA-512'.
+
+* signature_key_type - A string designating the signature scheme used to
+  generate the signature. Currently, the only supported value is 'RSA-PSS'.
+
+* signature_certificate_uuid - A string encoding the certificate uuid used to
+  retrieve the certificate from the key manager.
+
+Additionally, there are optional image signature metadata which the user can
+specify:
+
+* mask_gen_algorithm - A string designating the mask generation algorithm for
+  RSA-PSS. Currently, the only supported value is 'MGF1'.
+
+* pss_salt_length - A string representation of an int representing the salt
+  length for RSA-PSS. Defaults to the maximum salt length if it is not
+  specified.
+
+The image verification functionality in Glance then uses the signature_utils
+utility to verify this signature metadata before storing the image. If the
+signature is not valid or the metadata is incomplete, this API method will
+return a 400 error status and put the image into a "killed" state. Note that,
+if the signature metadata is simply not present, the image will be stored as
+it would normally.
+
+The user would then create an instance from this image using the Nova API's
+boot method. If the verify_glance_signatures flag in nova.conf is set to
+'True', Nova will call out to Glance for the image's properties, which include
+the properties necessary for image signature verification. Nova will compute
+the MD5 checksum of the image data and pass the checksum and image properties
+to the signature_utils class, which will verify the signature. If signature
+verification fails, or if the image signature metadata is either incomplete or
+absent, booting the instance will fail and Nova will log an exception. If
+signature verification succeeds, Nova will boot the instance and log a message
+indicating that image signature verification succeeded along with detailed
+information about the signing certificate.
+
+
+Proposed change
+===============
+
+The first component in this change is the creation of a standalone utility
+class responsible for the bulk of the functionality necessary for image
+signature verification. This utility will primarily consist of a public-facing
+method, which, when passed a reference to the signing certificate, a checksum,
+a specified hash method, and an image signature, will interface with Castellan
+to retrieve the certificate and will verify the signature using the
+pyca/cryptography library. More specifically, this utility will use
+pyca/cryptography's signature verification functionality to verify that the
+image signature is equivalent to the checksum signed using the specified
+keypair and hash method. This functionality is already implemented in the
+signature_utils class, a utility which performs image signature verification
+in Glance [3]. We then propose an initial implementation by incorporating this
+class into Nova's control flow for booting instances from images. Upon
+downloading an image, Nova will check whether the verify_glance_signatures
+configuration flag is set in nova.conf. If so, the signature_utils class will
+perform image signature verification using image properties passed to Nova by
+Glance. If this fails, or if the image signature metadata is incomplete or
+missing, Nova will not boot the image. Instead, Nova will throw an exception
+and log an error. If the signature verification succeeds, Nova will proceed
+with booting the instance.
+
+The next component will be to add functionality to the pyca/cryptography
+library which will validate a given certificate chain against a pool of given
+root certificates which are known to be trusted. This functionality will
+verify the signature of each certificate in the chain by retrieving the public
+key of the next certificate in the chain and performing a standard signature
+verification operation. The final certificate in the chain should be self-
+signed, so we verify it by retrieving its public key and performing the same
+signature verification operation. Once the signatures of the certificate chain
+are validated, we will validate the chain against the trusted root
+certificates by checking that at least one of the root certificates shares an
+issuer with the final certificate in the chain. This algorithm for validating
+chains of certificates against a set of trusted root certificates is a
+standard, and has been outlined in RFC 5280 [4].
+
+Once the certificate validation functionality has been added to the
+pyca/cryptography library, we will amend the signature_utils class by
+incorporating certificate validation into the signature verification workflow.
+We will implement a method which will use GET requests to dynamically fetch
+the certificate chain for a given certificate. Any service using this class
+will call the verify_signature method of this class with both a reference to
+the service's root certificate and a reference to the signing certificate.
+Upon fetching these certificates, the signature_utils class will fetch the
+chain of certificates for both. This class will then use the functionality of
+the pyca/cryptography library to verify the chain of signatures in the signing
+certificate's chain. Finally, this class will use the functionality of the
+pyca/cryptography library to validate the signing certificate's chain against
+the root of trust indicated by the service's root certificate's chain. If this
+validation succeeds, the class will proceed with the signature verification
+process. If not, this class will throw an exception and log an error.
+
+The certificate references will be used to access the certificates from a key
+manager through the interface provided by Castellan.
+
+Alternatives
+------------
+
+An alternative to using pyca/cryptography for the hashing and signing
+functionality is to use PyCrypto. We are electing to use pyca/cryptography
+based on both the shift away from PyCrypto in OpenStack's requirements and the
+recommendations of cryptographers reviewing the accompanying Glance spec [5].
+
+An alternative to using certificates for signing and signature verification
+would be to use a public key. However, this approach presents the significant
+weakness that an attacker could generate their own public key in the key
+manager, use this to sign a tampered image, and pass the reference to their
+public key to Nova along with their signed image. Alternatively, the use of
+certificates provides a means of attributing such attacks to the certificate
+owner, and follows common cryptographic standards by placing the root of trust
+at the certificate authority.
+
+An alternative to using the verify_glance_signatures configuration flag to
+specify that Nova should perform image signature verification is to use
+"trusted" flavors to specify that individual instances should be created from
+signed images. The user, when using the Nova CLI to boot an instance, would
+specify one of these "trusted" flavors to indicate that image signature
+verification should occur as part of the control flow for booting the
+instance. This may be added in a later change, but will not be included in the
+initial implementation. If added, the trusted flavors option will work
+alongside the configuration option approach. In this case, Nova would perform
+image signature verification if either the configuration flag is set, or if
+the user has specified booting an instance of the "trusted" flavor.
+
+Data model impact
+-----------------
+
+The accompanying work in Glance introduced additional Glance image properties
+necessary for image signing. The initial implementation in Nova will introduce
+a single configuration flag indicating whether Nova should perform image
+signature verification before booting an image.
+
+REST API impact
+---------------
+
+None
+
+Security impact
+---------------
+
+Nova currently lacks a mechanism to validate images prior to booting them. The
+checksum included with an image protects against accidental modifications but
+provides little protection against an adversary with access to Glance or to
+the communication network between Nova and Glance. This feature facilitates the
+creation of a logical trust boundary between Nova and Glance; this trust
+boundary permits the end user to have high assurance that Nova is booting the
+image which they originally uploaded.
+
+Although Nova will use certificates to perform this task, the certificates
+will be stored by a key manager and accessed via Castellan.
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+If the verification of a signature fails, then Nova will not boot an instance
+from the image, and an error message will be logged. The user would then have
+to edit the image's metadata through the Glance API, the Nova API, or the
+Horizon interface; or reinitiate an upload of the image to Glance with the
+correct signature metadata in order to boot the image.
+
+Performance Impact
+------------------
+
+This feature will only be used if the verify_glance_signatures configuration
+flag is set.
+
+When signature verification occurs there will be latency as a result of
+retrieving certificates from the key manager through the Castellan interface.
+There will also be CPU overhead associated with hashing the image data and
+decrypting a signature using a public key.
+
+Other deployer impact
+---------------------
+
+In order to use this feature, a key manager must be deployed and configured.
+Additionally, Nova must be configured to use a root certificate which has a
+root of trust that can respond to an end user's certificate signing requests.
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  dane-fichter
+
+Other contributors:
+  brianna-poulos
+  joel-coffman
+
+Reviewers
+---------
+
+Core reviewer(s):
+  None
+
+Work Items
+----------
+
+The feature will be implemented in the following stages:
+
+* Create standalone signature_utils utility class which handles interfacing
+  with a key manager through Castellan and verifying signatures.
+
+* Add functionality to Nova which calls the standalone class when Nova
+  uploads a Glance image and the verify_glance_signatures configuration flag
+  is set.
+
+* Add certificate validation functionality to the pyca/cryptography library.
+
+* Add functionality to the signature_utils class which fetches certificate
+  chains. Incorporate this method, along with the pyca/cryptography library's
+  certificate validation functionality into the signature_utils class's
+  functionality for verifying image signatures.
+
+* Amend the initial implementation in Nova to utilize this change by allowing
+  Nova to fetch its root certificate and pass it to the image signature
+  verification method.
+
+
+Dependencies
+============
+
+The pyca/cryptography library, which is already a Nova requirement, will be
+used for hash creation and signature verification. The certificate validation
+portion of this change is dependent upon adding certificate validation
+functionality to the pyca/cryptography library.
+
+In order to simplify the interaction with the key manager and allow multiple
+key manager backends, this feature will use the Castellan library [6]. Since
+Castellan currently only supports integration with Barbican, using Castellan
+in this feature indirectly requires Barbican. In the future, as Castellan
+supports a wider variety of key managers, our feature will require minimal
+upkeep to support these key managers; we will simply update Nova's and
+Glance's requirements to use the latest Castellan version.
+
+
+Testing
+=======
+
+Unit tests will be sufficient to test the functionality implemented in Nova.
+We will need to implement Tempest and functional tests to test the
+interoperability of this feature with the accompanying functionality in
+Glance.
+
+
+Documentation Impact
+====================
+
+Instructions for how to use this functionality will need to be documented.
+
+
+References
+==========
+
+Cryptography API: https://pypi.python.org/pypi/cryptography/0.2.2
+
+[1] https://github.com/openstack/glance-specs/blob/master/specs/liberty/image-signing-and-verification-support.rst
+[2] https://en.wikipedia.org/wiki/MD5#Security
+[3] https://github.com/openstack/glance/blob/master/glance/common/signature_utils.py
+[4] https://tools.ietf.org/html/rfc5280#section-6.1
+[5] https://review.openstack.org/#/c/177948/
+[6] http://git.openstack.org/cgit/openstack/castellan
-- 
2.1.0

