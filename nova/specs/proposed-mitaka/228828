From 2dd9c7de55a23a94469a3c89adfc62d5267e67b5 Mon Sep 17 00:00:00 2001
From: pcarlton <paul.carlton2@hp.com>
Date: Tue, 29 Sep 2015 11:24:11 +0100
Subject: [PATCH] Query and cancel ongoing live migrations

This spec proposes a new API to allow an operator to query and
cancel ongoing live migrations.

APIImpact

blueprint refresh-abort-live-migration

Change-Id: If5ca9f74899004753d4ceb7bf04290af07e9e9fa
---
 .../approved/refresh-abort-live-migration.rst      | 327 +++++++++++++++++++++
 1 file changed, 327 insertions(+)
 create mode 100644 specs/mitaka/approved/refresh-abort-live-migration.rst

diff --git a/specs/mitaka/approved/refresh-abort-live-migration.rst b/specs/mitaka/approved/refresh-abort-live-migration.rst
new file mode 100644
index 0000000..986fe3b
--- /dev/null
+++ b/specs/mitaka/approved/refresh-abort-live-migration.rst
@@ -0,0 +1,327 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+==========================================================
+Provide a way to query and abort an ongoing live migration
+==========================================================
+
+Blueprint:
+https://blueprints.launchpad.net/nova/+spec/refresh-abort-live-migration
+
+When using live migrations, an operator might want to see which are still
+ongoing, their status and may also wish to cancel them. Currently this
+requires intervention at the hypervisor level. This spec proposes a new
+nova API for listing inspecting and cancelling in-progress live migrations.
+
+Problem description
+===================
+
+It may be that an operator decides, after starting a live migration, that they
+would like to cancel it. Effectively this would mean rolling-back any partial
+migration that has happened and leaving the instance on the source node. It may
+be that the migration is taking too long, or some operational problem is
+discovered with the target node. As the set of operations that can be performed
+on an instance during live migration is restricted (only delete is currently
+allowed), it may be that an instance owner has requested that their instance be
+made available urgently.
+
+Currently aborting a live migration requires intervention at the hypervisor
+level, which Nova recognises and resets the instance state.
+
+When the admin account that initiates a live migration invokes the
+live-migration operation they send their current token. This is validated
+and passed to the compute manager and is retain in the context object
+associated with the migration operation. During the post migration phase this
+token is used to communicate with the Neutron API and thus validated again.
+If the migration operation takes longer than the remaining time before the
+token expires then this operation will fail.
+
+There is an upstream blue print for this issue -
+https://blueprints.launchpad.net/nova/+spec/refresh-abort-live-migration
+but it is not being actively pursued.
+
+We could address this issue within this specification by updating the
+context object within the source compute process when the same user that
+started the migration gets the status of the migration.
+
+An alternative approach might be to talk to keystone about the possibility of
+authorized users being able to request tokens with non standard expiry period?
+
+Use Cases
+----------
+
+As an operator of an OpenStack cloud, I would like the ability to query, stop
+and roll back an ongoing live migration.  This is required for a number of
+reasons.
+
+1. The migration may be failing to complete due to the instance's workload.
+   In some cases the solution to this issue may be to suspend the instance
+   but in other cases the migration may need to be abandoned or at least
+   postponed.
+2. The migration may be having an adverse impact on the instance,
+   i.e. the instance owner may be observing degraded performance of their
+   application and be requesting that the cloud operator address this
+   issue.
+3. The instance owner may wish to perform some instance management action
+   that is not permitted whilst a live migration is in progress.
+4. The instance migration may be taking too long due to the large amount
+   of data to be copied (i.e. the instance's ephemeral disk is very full)
+   and the cloud operator may have consulted with the instance owner and
+   decided to abandon the live migration and employ a different strategy.
+   For example, stop the instance, perform the hypervisor maintenance,
+   then restart the instance.
+
+Project Priority
+-----------------
+
+None
+
+Proposed change
+===============
+
+A new API method for listing, querying and cancelling ongoing live migrations.
+The Migration object and MigrationList object will be used to establish which
+migrations exist, with additional optional data provided by the compute driver.
+
+Rolling back a live migration should be very quick, as the source host is still
+active until the migration finishes.  However this depends on the approach
+implemented by the virtualization driver. For example Qemu is planning to
+implement a 'post copy' feature -
+https://www.redhat.com/archives/libvir-list/2014-December/msg00093.html
+In this situation a cancellation request should be declined because rolling
+back to the source node would be more work than completing the migration. In
+fact it is probably impossible!  Nova would need to be involved in the switch
+form pre-copy to post-copy so that it could switch the networking to the
+target host. Thus nova would know that the instance has switched and decline
+any cancellation requests.  If the instance migration were to encounter
+difficulties completing during the post copy the instance would need to be
+paused or rebooted to allow the migration to complete.  Obviously rebooting
+the instance would be a last resort since it would interrupt the instance.
+
+This will need an increment to the rpcapi version too.
+
+Alternatives
+------------
+
+One alternative is not doing this, leaving it up to operators to roll up their
+sleeves and get to work on the hypervisor.
+
+The topic of cancelling an ongoing live migration has been mooted before in
+Nova, and has been thought of as being suitable for a "Tasks API" for
+managing long-running tasks [#]_. There is not currently any Tasks API, but if
+one were to be added to Nova, it would be suitable.
+
+Data model impact
+-----------------
+
+Change id to uuid so migrations can be tracked and managed by uuid
+
+REST API impact
+---------------
+
+All to be added in a new microversion.
+
+* The currently-existing API for starting a live migration will be modified.
+  At the moment the response to that request is empty, but we will return
+  the id of the created Migration object.
+
+* Fetch a list of in-progress migrations
+
+  `GET /os-migrations`
+
+  This returns a list of migrations, for example::
+
+    {
+      "migrations" :
+        [
+          { "id" : ...
+            "instance_uuid" : ...
+            "source_compute" : ...
+            "dest_compute" : ...
+            "status" : ...
+            "type" : ...      # "live-migration" or "migration"
+          },
+          ...
+        ]
+    }
+
+  It will be possible to filter this list by source-compute,
+  dest-compute, status or type (or any combination of them).
+
+* Fetch details of an individual live migration
+
+  In order to refer to a specific live migration, in order to cancel it,
+  an API is suggested here to list and fetch details of ongoing live
+  migrations.
+
+  `GET /os-migrations/{uuid}`
+
+  This returns as much detail as is available about a live migration, for
+  example::
+
+    {
+      "uuid" : ...
+      "start" : ...            # iso8601 formatted date/time
+      "instance-uuid" : ...
+      "source_compute" : ...
+      "dest_compute" : ...
+      "status" : ...
+      "type" : ...
+      "progress" : ...         # percentage completion, 0-100
+    }
+
+  The "progress" field is intended to allow an operator to provide tooling for
+  monitoring the progress of live migrations, for example to detect cases which
+  are unlikely to complete. Progress will not necessarily be monotonic due to
+  the need to repeatedly sync data from source to target node. Hypervisors
+  which can't provide a value for the "progress" field should omit it.
+
+* Stop an in-progress live migration
+
+  `POST /os-migrations/{id}/cancel`
+
+  No request body is necessary
+
+  Normal http response code: `204 No Content`
+  No response body is needed
+
+  Expected error http response code: `404 Not Found`
+  - the migration does not exist, perhaps it has finished.
+  - Note this code will be returned in the case where a non admin user
+    tries to cancel a migration on an instance they do not have authority
+    over.
+
+  Expected error http response code: `403 Forbidden`
+  - the migration exists but the user is not authorized to cancel it
+  - this would only be returned in the case where a non admin user has
+    management authority over the instance but has not been granted the
+    authority to cancel live migrations of their instances.
+
+  Expected error http response code: `405 Method not supported`
+  - it is not possible to even attempt to cancel the live migration.
+    Likely to be because the hypervisor does not support cancellation
+    of live migrations.
+
+  Expected error http response code: `408 Request timeout`
+  - the migration cancellation failed to complete within the time allowed
+  This could be 60 seconds a configurable period set by configuration value
+
+  Expected error http response code: `409 Conflict`
+  - the migration state is invalid for cancellation
+
+
+Policy: The GET can be called by admin users or normal users.  Results for
+normal users will be filtered to only include migrations relating to
+instances belonging to tenants they are members of.
+
+The DELETE can be used by admin users.  Also, normal users assigned a
+specific role will be able to cancel migrations relating to
+instances belonging to tenants they are members of.  Users not assigned
+the required role will get an '403' if they try to cancel the migration
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+Emit notification message indicating successful cancellation of migration
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None
+
+Other deployer impact
+---------------------
+
+Deployers who have tooling around live migration may want to rewrite.
+
+Developer impact
+----------------
+
+None
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+Paul Carlton
+
+Other assignees:
+Claudiu Belu
+
+Work Items
+----------
+
+* Getting lists and details about live migrations
+* Cancelling a live migration per hypervisor
+  * libvirt
+  * hyper-v
+  * vmware
+* DELETE method on a live migration
+* python-novaclient operations
+
+Dependencies
+============
+
+None
+
+Testing
+=======
+
+* Unit and Functional tests in Nova
+
+* Tempest tests
+
+  Currently the multinode jobs can test live migration. I expect the devstack
+  setup used by those tests to be able to complete a live migration very
+  quickly, so it may be necessary to use a fake virt driver to simulate a live
+  migration slow enough that cancelling it reliably is possible. Ideally we
+  would use a live migration which never completes. This will probably not be
+  feasible in tempest, so functional tests in nova's tree should be used.
+  This should be extended to verify the impact of attempting to cancel a
+  migration during various phase of the migration.
+
+Documentation Impact
+====================
+
+New API needs to be documented:
+
+* Compute API extensions documentation.
+  http://developer.openstack.org/api-ref-compute-v2.1.html
+
+* nova.compute.api documentation
+  http://docs.openstack.org/developer/nova/api/nova.compute.api.html
+
+References
+==========
+
+Some details of how this can be done with libvirt:
+https://www.redhat.com/archives/libvirt-users/2014-January/msg00008.html
+
+.. [#] http://lists.openstack.org/pipermail/openstack-dev/2015-February/055751.html
+
+History
+=======
+
+.. list-table:: Revisions
+   :header-rows: 1
+
+   * - Release Name
+     - Description
+   * - Mitaka
+     - Introduced
-- 
2.1.0

