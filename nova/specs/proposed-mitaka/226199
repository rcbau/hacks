From 57a25bf82b962c652cf46c8a70ba43edb69b7825 Mon Sep 17 00:00:00 2001
From: Andrea Rosa <andrea.rosa@hp.com>
Date: Mon, 21 Sep 2015 17:27:09 +0100
Subject: [PATCH] Allow more instance operations during live migration

This spec proposes a change to Nova to allow an operator
or user to perform more actions on an instance while it
is being live migrated. The actions are all ones which
exist in Nova already but are currently blocked.

APIImpact

Change-Id: I05a293f5aa5818c43eacdabb6d443e270d84c2d0
---
 ...e-instance-operations-during-live-migration.rst | 159 +++++++++++++++++++++
 1 file changed, 159 insertions(+)
 create mode 100644 specs/mitaka/approved/enhance-instance-operations-during-live-migration.rst

diff --git a/specs/mitaka/approved/enhance-instance-operations-during-live-migration.rst b/specs/mitaka/approved/enhance-instance-operations-during-live-migration.rst
new file mode 100644
index 0000000..c68425e
--- /dev/null
+++ b/specs/mitaka/approved/enhance-instance-operations-during-live-migration.rst
@@ -0,0 +1,159 @@
+..
+ This work is licensed under a Creative Commons Attribution 3.0 Unported
+ License.
+
+ http://creativecommons.org/licenses/by/3.0/legalcode
+
+======================================================
+Allow More Instance Operations During a Live Migration
+======================================================
+
+https://blueprints.launchpad.net/nova/+spec/enhance-instance-operations-during-live-migration
+
+Currently the only operation a user can perform on an instance which is being
+live-migrated is "delete". Block migration can take several hours for a large
+and busy instance, so it would be better for a user if those operations which
+are logically possible during a migration were allowed.
+
+Problem description
+===================
+
+An operator might well want to use live migration to manage workloads, for
+reasons such as node maintenance or upgrade, datacenter management,
+or noisy-neighbor management. This currently prevents the user from doing
+a lot of instance actions for the duration, and a block live migration of a
+busy instance can take a long time.
+
+Use Cases
+----------
+
+* As a user of an OpenStack cloud, I would like to be able to manage my
+  instances while a live migration is taking place.
+
+* As an admin of an OpenStack cloud, I would like to be able to use live
+  migration for operational purposes with less inconvenience to my users.
+
+Project Priority
+-----------------
+
+None
+
+Proposed change
+===============
+
+There are many operations which could be allowed during a live migration. It
+may not be practical to implement all of these, but in rough priority order:
+
+* soft reboot. An user can request a soft reboot of an instance during a live
+  migration.
+* console-log. An user can request the console-log for an instance and he will
+  get back the console-log found on the hosts the instance is when the command
+  has been executed. It could be that the user get an empty console-log if the
+  migration has been completed, this is something we have at the moment and
+  enabling the request of the console-log during the migration doesn't change
+  this behaviour. We could find a way to migrate the console-log file from the
+  source to the destination node and merge the two files but this is not in the
+  scope of this specs.
+* lock / unlock. An user can request a lock / unlock of the instance during the
+  live migration. This action doesn't affect the VM as it is just a DB update
+  for the instance record.
+* get-*-console. An user can request to get console access. It is
+  possible that the full URL returned is no more valid if the URL has been
+  generated by the source node and the instance has been successfully
+  migrated. In this case the user has to request a new URL.
+* rename. An user can rename the instance name during the live-migration as
+  this operation doesn't interfere with the process as it is just a DB update
+  for the instance record.
+
+Alternatives
+------------
+
+This is new functionality. The primary alternative is to not add it, and leave
+the users and operators with the same choices the have today.
+
+Data model impact
+-----------------
+
+None
+
+REST API impact
+---------------
+
+The API remains unchanged, however some operations will change their response
+from 409/Conflict into a success response when called during
+task_state.MIGRATING.
+As we modify the response of existing operations, the change will require a new
+API microversion.
+
+Security impact
+---------------
+
+None
+
+Notifications impact
+--------------------
+
+None
+
+Other end user impact
+---------------------
+
+None
+
+Performance Impact
+------------------
+
+None anticipated
+
+Other deployer impact
+---------------------
+
+None
+
+Developer impact
+----------------
+
+None
+
+
+Implementation
+==============
+
+Assignee(s)
+-----------
+
+Primary assignee:
+  Andrea Rosa <andrea.rosa@hp.com>
+
+Work Items
+----------
+
+* As described in the "Proposed Change" section. Each item there corresponds to
+  a single work item.
+
+* Enhancement to the Tempest virt driver used in live migration tests
+
+Dependencies
+============
+
+None
+
+Testing
+=======
+
+* Unit and Functional tests in Nova
+
+* If it is possible to modify the virt driver used by tempest to guarantee that
+  a live migration can be made to take enough time that these operations can be
+  performed, then Tempest tests can be written. This would be preferable.
+
+
+Documentation Impact
+====================
+
+These changes need to be documented in user and operator documentation.
+
+References
+==========
+
+None
-- 
2.1.0

